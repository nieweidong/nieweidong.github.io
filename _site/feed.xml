<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">聂微东，一枚Web技术领域的手艺人</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2016-12-27T23:00:07+08:00</updated>
<id>/</id>
<author>
  <name>nieweidong</name>
  <uri>/</uri>
  <email>darrencode@qq.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[提升幸福感之「无线耳机」]]></title>
  <link rel="alternate" type="text/html" href="/buybuybuy/" />
  <id>/buybuybuy</id>
  <published>2016-12-24T00:00:00+08:00</published>
  <updated>2016-12-24T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;转眼又是年底啦，节奏如下：&lt;br /&gt;
双十一接黑五，然后再战双十二，现在又是剩蛋，跟着特么是圆蛋，不特么 买买买 怎么对得起自己这一年来的搬得那么多砖。&lt;/p&gt;

&lt;p&gt;没错，我也没少剁手，如封面那款柃檬黄的耳机。&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/jinguanzhang/60.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;提升幸福感的方式有多种，买买买应该是最粗暴、最直接的方式。&lt;br /&gt;
而对于广大程序员，买个无线耳机肯定是其中之一。&lt;/p&gt;

&lt;p&gt;封面这款 Sony大法的 MDR-100ABN是我非常推荐的一款。&lt;br /&gt;
ps：特么劳资都买了，能不推荐么…&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/headphones/pangxie.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;宋仲基、鹿晗代言，Sony大法的信仰加持都不是重点，关键还带强大的降噪功能，配合着耳机的超高颜值，真心适合闷骚和明骚的筒子们。&lt;/p&gt;

&lt;p&gt;安利下 &lt;strong&gt;头戴式降噪无线耳机&lt;/strong&gt; 的好处：&lt;br /&gt;
一、无线意味着不用重复「解线」这个虐心步骤了，如下图：&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/headphones/jiexian.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
蛋疼一下以示尊重。&lt;/p&gt;

&lt;p&gt;二、冬天了，买个头戴式耳机，还能抗风保暖，想想都完美。&lt;br /&gt;
ps：夏天肯定热，请有心理准备。&lt;/p&gt;

&lt;p&gt;三、降噪是个好东西，尤其是在地铁、飞机、火车，甚至是在吵杂的办公环境下…用了就离不开它。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我这种纯平民，非大神，也确实没听过什么极品。&lt;br /&gt;
以下内容相对主观，字字都是亲身感受，有错包涵。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不聊声音&lt;/strong&gt;。关键俺也不懂，聊这种东西还是上知乎吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;煲耳机&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;煲耳机主要是让耳机的机械系统的一个迅速老化过程，动圈耳机的发声系统是由音圈驱动振膜，而振膜是固定在耳机的架子上，从理论上讲，振膜运动应当是一种活塞（垂直）运动，这需要振膜的边缘有较大的顺性，煲就是煲这里，新耳机的振膜边缘是比较紧的，弹性大而顺性小，煲耳机就是让它的边缘活动开，声音就不那么发紧了。&lt;br /&gt;
——百度百科&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;据说镀铝液晶振膜耐煲，不过完全不懂。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;聊两款相关的头戴式降噪耳机&lt;/strong&gt;。&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/headphones/erji.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bose &lt;strong&gt;QC35&lt;/strong&gt;(上右一)绝对是这级别的降噪之王，仅提供俩颜色：黑色和银色。&lt;br /&gt;
唯一的缺点其实也就是相对 &lt;strong&gt;丑&lt;/strong&gt; 了点。&lt;br /&gt;
再透露个身边的小故事：我司的客户端团队，有 5台 QC35，这种做法很不清真。&lt;/p&gt;

&lt;p&gt;Beats &lt;strong&gt;Studio Wireless&lt;/strong&gt;(上中间) 赢在高颜值和高调的品牌。&lt;br /&gt;
真心这个 “b” Logo就是种流行文化的象征，品牌溢价是一个无法避免的状况，毕竟这个牌子已然和时尚挂钩。&lt;/p&gt;

&lt;p&gt;简单粗暴的定调子：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;买 Sony诠释充值 &lt;strong&gt;信仰&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;买 Bose诠释 &lt;strong&gt;低调&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;买 Beats诠释 &lt;strong&gt;时尚&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;价格：&lt;br /&gt;
QC35 &amp;gt; SW &amp;gt; 100ABN。&lt;/p&gt;

&lt;p&gt;降噪是个好东西，来个 QC35段子吧：  &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;有多安静我来描述一下，孩子数学成绩不好，你在银行做经理，维护客户关系，不上不下，有房贷和车贷，每月按揭五千。你老婆在市人民医院做护士，她妈有尿毒症透析多年，她不爱你。你年轻的时候觉得能成一番事业，但现在也就这样，朋友们混的都比你好，你下班在车库停稳车，关掉引擎，呜一声安静了下来。太安静了，你生命中少有这么安静的时刻，你打算发十分钟呆再上楼吃饭。
以上就是 BOSE QC 35 的降噪效果测评。&lt;br /&gt;
——via微博&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/jinguanzhang/16.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后来几张 MDR-100ABN开箱图：&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/headphones/sony1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/headphones/sony2.jpeg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/headphones/sony3.jpeg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/headphones/sony4.jpeg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/headphones/sony5.jpeg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/headphones/sony6.jpeg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/headphones/sony7.jpeg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/headphones/sony8.jpeg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/headphones/sony9.jpeg&quot; alt=&quot;&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;反正这类无线耳机，买了就不会后悔，&lt;strong&gt;选谁都没错&lt;/strong&gt;，而且选着选着就上瘾了，我就是这么陷进坑里的，哈哈。&lt;/p&gt;

&lt;p&gt;差不多就这样，over.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/buybuybuy/&quot;&gt;提升幸福感之「无线耳机」&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on December 24, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[认知与说服]]></title>
  <link rel="alternate" type="text/html" href="/convince/" />
  <id>/convince</id>
  <published>2016-12-10T00:00:00+08:00</published>
  <updated>2016-12-10T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;前些日子发表了篇 &lt;a href=&quot;http://www.fefork.com/yy/&quot;&gt;《YY一下十年后的自己》&lt;/a&gt;，上周三晚我顺手把这篇文章丢到了博客园的博客上，没想到评论区引起了一番有关于“大龄程序员”的讨论。&lt;/p&gt;

&lt;p&gt;今天写这篇文章的目的其实不是为了让大家去讨论某些言论或个人，而是想表达偶冷静后的些许想法：&lt;br /&gt;
在网络上面对不相识、无交集的陌生人，如果不能简单几句达成共识，何必强行去「说服」对方，人与人的「认知」其实各不相同，不如相忘于江湖。&lt;br /&gt;
ps：冷静后的言论肯定是经过大脑的，但特么脾气上来的时候劳资该嘲讽还是忍不住嘲讽的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/suo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有关讨论的截图我先放出来。&lt;br /&gt;
文章一共收到评论数 78个，除去一半多无价值的留言，有意义的评论其实不多，几分钟就可以看完。&lt;/p&gt;

&lt;p&gt;等看官您先看完截图，我们再聊聊「认知」和「说服」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/convince/yy1.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/convince/yy2.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/convince/yy3.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/convince/yy4.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/convince/yy5.png&quot; alt=&quot;&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;看官辛苦，居然坚持翻到这儿啦，先给您捶捶腿。。。&lt;/p&gt;

&lt;p&gt;截图里的内容今天就不展开说了，其实这种争论没有太多价值，无非就是消遣了时间而已。&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;认知&lt;/strong&gt; 指通过心理活动（如形成概念、知觉、判断或想象）获取知识。习惯上将认知与情感、意志相对应。&lt;br /&gt;
&lt;strong&gt;认知&lt;/strong&gt; 是个体认识客观世界的信息加工活动。感觉、知觉、记忆、想象、思维等认知活动按照一定的关系组成一定的功能系统，从而实现对个体认识活动的调节作用。在个体与环境的作用过程中，个体认知的功能系统不断发展，并趋于完善。&lt;br /&gt;
—— 百度百科&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;所谓&lt;/strong&gt; 说服，是指好好地向对方说理，使之接受，试图使对方的态度、行为朝特定方向改变的一种影响意图的沟通。&lt;br /&gt;
—— 百度百科&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;认知与说服 这俩东西都比较抽象，下面我来说一些我的简单思考吧。&lt;/p&gt;

&lt;p&gt;其实认知和说服之间的纽带就是 讲道理。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何讲清楚一个道理呢？&lt;/li&gt;
  &lt;li&gt;什么又是正确的道理呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你觉得这俩问题的答案是什么。&lt;br /&gt;
。。。&lt;br /&gt;
。。。&lt;br /&gt;
。。。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;认知不同，讲出的道理也各不相同；&lt;/h4&gt;
&lt;p&gt;#### 认知不同，思考问题的方式也各不相同。&lt;/p&gt;

&lt;p&gt;最后，在这寒冷的冬季，俺给大家准备了一碗浓汤来驱寒。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;站在80楼往下看，望眼过去都是美景；&lt;br /&gt;
你从2楼往下看，满地垃圾；&lt;br /&gt;
人若没有高度，看到的都是问题；&lt;br /&gt;
没有格局，看到的都是鸡毛蒜皮；&lt;br /&gt;
人生有高度，看到的都是美好的未来。&lt;br /&gt;
—— 来自网络段子&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;差不多就这样。
over.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/convince/&quot;&gt;认知与说服&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on December 10, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[YY一下十年后的自己]]></title>
  <link rel="alternate" type="text/html" href="/yy/" />
  <id>/yy</id>
  <published>2016-12-04T00:00:00+08:00</published>
  <updated>2016-12-04T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;每到年底总是我最焦虑的时候，年龄越大情况越明显。&lt;br /&gt;
可能越长大越是对 &lt;strong&gt;时光的流逝&lt;/strong&gt; 更有感触，有感触之后就会胡思乱想。所以随手开始写下这篇文章。&lt;/p&gt;

&lt;p&gt;人无远虑必有近忧。那么同学呀，你听说过安利么。&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/baozou/247.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一直都有做总结的习惯，隔一段时间就会自我反省反省。&lt;br /&gt;
这又到年底了，今年我又给自己怎样的答卷呢，这个恼人的问题先等到 2017年初再说吧，那会儿自然有年度总结奉上。&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/tuzi/40.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当下我想 “YY一下十年之后的自己”。&lt;br /&gt;
十年后俺四十岁，那时的我最害怕的会是什么呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;碌碌无为&lt;/li&gt;
  &lt;li&gt;胖&lt;/li&gt;
  &lt;li&gt;秃&lt;/li&gt;
  &lt;li&gt;穷&lt;/li&gt;
  &lt;li&gt;丑&lt;/li&gt;
  &lt;li&gt;健康&lt;/li&gt;
  &lt;li&gt;家庭&lt;/li&gt;
  &lt;li&gt;父母&lt;/li&gt;
  &lt;li&gt;孩子&lt;/li&gt;
  &lt;li&gt;。。。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个念头刚起，无数糟糕的画面开始在脑海里翻滚，欲罢不能。&lt;/p&gt;

&lt;p&gt;以上的所有项都是我担心的、害怕的，可能最最接受不鸟的还是 碌碌无为。&lt;br /&gt;
作为一枚北漂，如果要选择平平淡淡的生活，确实不如早点回老家谋求一份稳定的饭碗，还能常伴家人左右。&lt;/p&gt;

&lt;p&gt;以上所有的恐惧都可以用一个词解释：“中年危机”。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;中年危机，也称“灰色中年”，一般高发在39～50岁，在40～65岁之间的男性身上，还被称为“男人四十综合征”。从广义上来讲，是指这个人生阶段可能经历的事业、健康、家庭婚姻等各种关卡和危机。&lt;br /&gt;
——来自 百度百科“中年危机”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;去年国内上映了两部和中年危机相关的电影，说出名字来大家基本都知道：《夏洛特烦恼》、《港囧》。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/xialuotefannao.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/gangjiong.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;没错，这两部电影其实都在说 “男人四十综合征”。&lt;br /&gt;
而且两部剧最大的相同点就是 “找初恋”！&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/jinguanzhang/55.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其实有关中年危机的电影，我更推荐《男人四十》，一部是 2002年上映的港片。&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/nanrensishi.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;林耀国（张学友饰）是位中学中文教师。当年他在学校里是有名的才子，而如今看到那些飞黄腾达、闲来打打高尔夫球的大学同学们，他心里的滋味很难述说。这种失落感，只有他自己才能体会得到。&lt;br /&gt;
四十岁的林耀国，虽然自感惭愧，但在他的学生胡彩蓝（林嘉欣饰）的眼中却是很有魅力，彩蓝爱上了他，并闹得全校皆知。耀国像其他正常的老师一样，极力免惹麻烦，却又恐怕过分的避嫌会影响彩蓝的心里，而且彩蓝长得漂亮又多愁善感，在她身上出现了他妻子陈文靖（梅艳芳饰）的年轻影子。&lt;br /&gt;
本来平淡的生活还算美满，彩蓝的爱令林耀感到了压力和不自在，而身处癌症末期的盛老师（庹宗华饰）回来，更令他的平静生活掀起了波澜。文靖当年爱上了盛老师，而且林耀国的长子安然（谭俊彦饰）的亲生父亲也是盛老师。当年文靖怀了孕，盛老师抱头跑掉了，这个满腹才华但性格软弱的老师，一直是耀国与文靖的隐忧。更糟糕的是文靖竟向耀国要求放一个月假。这个贤慧尽责的妻子，要用她自己的办法去解决那个困扰她的心魔。同情、不安与愤怒轮流折磨着耀国。教务的压力、中年的困扰 这种种因素令彩蓝所代表的诱惑加倍吸引着他。面对此情此景，一个四十岁的男人该做何种选择，中年男人的困境由此而生。&lt;br /&gt;
—— 来自百度百科“男人四十”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;偶离四十还有十年。十年时间意味着什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果去创业的话，预计能经历 1~3次创业；&lt;/li&gt;
  &lt;li&gt;继续打工，预计能有 2~4次押宝的机会；&lt;/li&gt;
  &lt;li&gt;1年阅读 30本书，10年是 300本书；&lt;/li&gt;
  &lt;li&gt;每年去 1~2个国家旅游，十年是 10~20个国家；&lt;/li&gt;
  &lt;li&gt;每周写一篇文章，十年差不多是520篇；&lt;/li&gt;
  &lt;li&gt;。。。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;希望十年之后的我：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不要太胖，因为我一长胖就容易变懒，而且不好看；&lt;/li&gt;
  &lt;li&gt;不要太穷，尤其不要为了创业而影响到家人的生活。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不敢奢求太多，因为未来有太多的不确定。反正就是希望真到中年的时候，少点“危机”吧，哈哈哈哈~&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/jinguanzhang/54.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;确实已经努力了，便没有什么好后悔的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;以前总喜欢逼自己，每每都自己给自己压力，让自己完成这完成那；现在对自己没那么那么严苛了，因为知道自己的斤两，懵懂明白生活的无奈，所以开心就好，默默的努力，默默的不停歇就行，这就是我当下的心态。&lt;br /&gt;
—— 摘自我的《2015简单总结》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最后，为这十年定一个小目标吧：&lt;br /&gt;
  在湖南老家拥有一栋大大的房子。&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/xiongmao/146.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;差不多就这样。
over.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/yy/&quot;&gt;YY一下十年后的自己&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on December 04, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[认知与说服]]></title>
  <link rel="alternate" type="text/html" href="/convince/" />
  <id>/convince</id>
  <published>2016-12-04T00:00:00+08:00</published>
  <updated>2016-12-04T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;前些日子发表了篇 &lt;a href=&quot;http://www.fefork.com/yy/&quot;&gt;《YY一下十年后的自己》&lt;/a&gt;，上周三晚我顺手把这篇文章丢到了博客园的博客上，没想到评论区引起了一番有关于“大龄程序员”的讨论。&lt;/p&gt;

&lt;p&gt;今天写这篇文章的目的其实不是为了让大家去讨论某些言论或个人，而是想表达偶冷静后的些许想法：&lt;br /&gt;
在网络上面对不相识、无交集的陌生人，如果不能简单几句达成共识，何必强行去「说服」对方，人与人的「认知」其实各不相同，不如相忘于江湖。&lt;br /&gt;
ps：冷静后的言论肯定是经过大脑的，但特么脾气上来的时候劳资该嘲讽还是忍不住嘲讽的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/suo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有关讨论的截图我先放出来。&lt;br /&gt;
文章一共收到评论数 78个，除去一半多无价值的留言，有意义的评论其实不多，几分钟就可以看完。&lt;/p&gt;

&lt;p&gt;等看官您先看完截图，我们再聊聊「认知」和「说服」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/convince/yy1.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/convince/yy2.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/convince/yy3.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/convince/yy4.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/convince/yy5.jpg&quot; alt=&quot;&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;看官辛苦，居然坚持翻到这儿啦，先给您捶捶腿。。。&lt;/p&gt;

&lt;p&gt;截图里的内容今天就不展开说了，其实这种争论没有太多价值，无非就是消遣了时间而已。&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;认知&lt;/strong&gt; 指通过心理活动（如形成概念、知觉、判断或想象）获取知识。习惯上将认知与情感、意志相对应。&lt;br /&gt;
&lt;strong&gt;认知&lt;/strong&gt; 是个体认识客观世界的信息加工活动。感觉、知觉、记忆、想象、思维等认知活动按照一定的关系组成一定的功能系统，从而实现对个体认识活动的调节作用。在个体与环境的作用过程中，个体认知的功能系统不断发展，并趋于完善。&lt;br /&gt;
—— 百度百科&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;所谓&lt;/strong&gt; 说服，是指好好地向对方说理，使之接受，试图使对方的态度、行为朝特定方向改变的一种影响意图的沟通。&lt;br /&gt;
—— 百度百科&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;认知与说服 这俩东西都比较抽象，下面我来说一些我的简单思考吧。&lt;/p&gt;

&lt;p&gt;其实认知和说服之间的纽带就是 讲道理。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何讲清楚一个道理呢？&lt;/li&gt;
  &lt;li&gt;什么又是正确的道理呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你觉得这俩问题的答案是什么。&lt;br /&gt;
。。。&lt;br /&gt;
。。。&lt;br /&gt;
。。。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;认知不同，讲出的道理也各不相同；&lt;/h4&gt;
&lt;p&gt;#### 认知不同，思考问题的方式也各不相同。&lt;/p&gt;

&lt;p&gt;最后，在这寒冷的冬季，俺给大家准备了一碗浓汤来驱寒。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;站在80楼往下看，望眼过去都是美景；&lt;br /&gt;
你从2楼往下看，满地垃圾；&lt;br /&gt;
人若没有高度，看到的都是问题；&lt;br /&gt;
没有格局，看到的都是鸡毛蒜皮；&lt;br /&gt;
人生有高度，看到的都是美好的未来。&lt;br /&gt;
—— 来自网络段子&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;差不多就这样。
over.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/convince/&quot;&gt;认知与说服&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on December 04, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[微信小程序首次官方分享的纪要]]></title>
  <link rel="alternate" type="text/html" href="/weixin2/" />
  <id>/weixin2</id>
  <published>2016-11-30T00:00:00+08:00</published>
  <updated>2016-11-30T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;先交代备注：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;这次有关小程序的分享只有技术的 QA环节，其他如产品、入口、流量、与公众号的整合等等，回答都是暂时无法给出答案或不确定；&lt;/li&gt;
  &lt;li&gt;小程序最终发布时间官方也还未确定，不过说应该就是近期；&lt;/li&gt;
  &lt;li&gt;小程序的分享环节不允许录像；&lt;/li&gt;
  &lt;li&gt;官方不会分享本次小程序的PPT，但是前排同学有拍照，已经统一按顺利放在结尾处，强烈推荐阅读；&lt;/li&gt;
  &lt;li&gt;图片较多，打开较慢，请有心理准备。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;很久没参加技术相关的大会了，不过 11/23 特意去参加了微信官方组织的开发者培训班，日常安排如下：&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，其实去听培训偶就是为了下午要分享的 微信小程序，但是没想到上午内容都非常的干货，确实有很多值得思考的地方，微信生态的商业化确实令人期待。&lt;/p&gt;

&lt;p&gt;言归正传，这篇文章就是介绍微信小程序分享的纪要。&lt;br /&gt;
先分享段视频，内容是微小新程序的demo(比较模糊，凑活体会哈)：  &lt;/p&gt;

&lt;iframe height=&quot;498&quot; width=&quot;510&quot; src=&quot;http://www.fefork.com/images/post/wx/WeChatSight51.mp4&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;可以直观的看到微小程序的体验非常流畅。&lt;br /&gt;
ps：屁话，虽然用的是 Web的开发方式，但是最终的在 Client的效果是用原生实现，体验必须流畅。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;当天的内容非常多，但是这里就重点介绍几个我觉得有意思的。&lt;/p&gt;

&lt;h3 id=&quot;webnative&quot;&gt;一、类 Web的开发方式、Native的体验效果的实现原理&lt;/h3&gt;

&lt;p&gt;其实最大的收获就是了解了小程序这套框架原理。&lt;br /&gt;
虽然自己有开发过几个 demo，也看到网上很多开源的项目。但是通过官方技术同学一点点的去深入剖析，进一步理解了实现方式。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;WXML -&amp;gt; 编译为JS -&amp;gt; Virtual Tree -&amp;gt; DOM Tree&lt;br /&gt;
WXSS -&amp;gt; Compiler -&amp;gt; JS -&amp;gt; DPR -&amp;gt; CSS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ps：请重点关注 PPT中有关 View的那几页。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;二、微信公众平台的历史包袱&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;注册小程序的时候发现，不能和公众号名称一样，我那时心想着不是坑爹么。&lt;/strong&gt;&lt;br /&gt;
官方的解释是：为了减少运营风险，因为如果可以一致，肯定会引起大量的名称抢注。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;小程序的注册账号不可以和公众号、开放平台、个人微信号的邮箱重复。&lt;/strong&gt;&lt;br /&gt;
我当初就直接注册了一个新 QQ，然后用新 QQ的邮箱注册的。&lt;br /&gt;
官方的解释是自己做的不对，而且不光小程序，公众号同样有这个问题，都是历史包袱导致，原因是一个账号只能关联一个服务，不能关联多个。&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/maomi/19.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-1&quot;&gt;三、被吐槽的开发者工具&lt;/h3&gt;

&lt;p&gt;如果你关注小程序开发，那么吐槽最多就是这个开发者工具。同样，我也多次被开发者工具弄的欲哭无泪。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;开发者工具和客户端回归的样式不一样？&lt;/strong&gt;&lt;br /&gt;
不一样就对了，因为暂时就是没法保证一样。&lt;br /&gt;
开发者工具是基于 nwjs，其实就是 Chrome；而 Client中其实使用的是 JSCore(IOS)和X5 JS解析器(Android)。  &lt;/p&gt;

&lt;p&gt;从基础环境上就不是一个东西。&lt;br /&gt;
比如你再开发者工具中的 .js文件输入 document或者windows之类的，特么它还给你 Autocomplete，你别天真的以为可以使用这些对象，你说这受的鸟么。&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/xiaorentou/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;虽然一直在黑开发者工具，但是还是替他多解释一句吧。官方表示：暂时就一个全人力在支持开发者工具…&lt;br /&gt;
所以不好用的原因一句定位了，这个锅背的不容易哈~&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-2&quot;&gt;四、请用构建的方式开发小程序&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;想用 node mudule？&lt;br /&gt;
想用 ES6？&lt;br /&gt;
想用 SASS？&lt;br /&gt;
想…  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好吧，不要想太多，这些都是需要开发者自己去用构建工具搞定的。&lt;br /&gt;
PS：听官方同学透露，大多数的小程序开发都是用构建工具来实现。&lt;/p&gt;

&lt;h3 id=&quot;web&quot;&gt;五、滑动事件和 Web中有区别&lt;/h3&gt;

&lt;p&gt;小程序中的 scroll 事件不好使。原因是小程序其实是客户端界面，不是在浏览器里，所以没有这个滑动事件。&lt;br /&gt;
但是小程序有提供滑动到底部和头部下拉的 JS接口，分别为 onReachBottom和 onPullDownRefresh。&lt;/p&gt;

&lt;p&gt;影响：图片的 lazyload不要想啦。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;五十张会议 PPT记录，请查收。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG2.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG3.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG4.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG5.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG6.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG7.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG8.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG9.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG10.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG11.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG12.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG13.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG14.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG15.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG16.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG17.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG18.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG19.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG20.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG21.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG22.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG23.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG24.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG25.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG26.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG27.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG28.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG29.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG30.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG31.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG32.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG33.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG34.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG35.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG36.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG37.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG38.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG39.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG40.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG41.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG42.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG43.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG44.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG45.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG46.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG47.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG48.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG49.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/wx/WechatIMG50.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;微信小程序暂时哪哪都不美好，但是微信的生态确实预示着很多互联网的未来。&lt;/p&gt;

&lt;p&gt;就这样，over.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/weixin2/&quot;&gt;微信小程序首次官方分享的纪要&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on November 30, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[对于前端，「微信小程序」其实不美好]]></title>
  <link rel="alternate" type="text/html" href="/weixin1/" />
  <id>/weixin1</id>
  <published>2016-11-13T00:00:00+08:00</published>
  <updated>2016-11-13T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;微信小程序开放公测了，9月底我曾经写过一篇 &lt;a href=&quot;http://www.fefork.com/weixin_appstore/&quot;&gt;「微信小程序」来了&lt;/a&gt;，其中最后一句：“谢天谢地，我居然还是个前端”。&lt;br /&gt;
这种火爆的新事物总是令人激动，感谢这个时代。&lt;/p&gt;

&lt;p&gt;但是，当我真作为开发者去一行行撸码，我还是忍不住翻起了白眼。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/jinguanzhang/5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;终于，11/03微信小程序正式开始公测。本着“另杀错莫放过”的原则，我也开始了自己的微信小程序学习之旅。&lt;br /&gt;
ps：以下出现的“小程序”即微信小程序。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/tuzi/101.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对小程序感兴趣的同学很多，但是申请公测的门槛着实不低，得是企业、政府、媒体等等，反正得有正儿八经资质的开发者才能搞到资格。&lt;/p&gt;

&lt;p&gt;前阵子到处都可以见到媒体对小程序的曝光。&lt;br /&gt;
大多都是 YY微信这个生态如何如何，开发者如何如何，又从商业角度聊，又从渠道维度扯，反正说得新兴创业者、开发者泪流满面，觉得自己已经即将迎风飞翔一样。&lt;/p&gt;

&lt;p&gt;从 11/06申请小程序通过至今，我也写了几天小程序了，网上例子看了不少，各种问题和学习笔记也零零散散记了一堆，这篇文章先聊三点我的体会。  &lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;一、学习成本不高&lt;/h3&gt;

&lt;p&gt;从相关的各种报道都有看到，说小程序是一套全新的、基于微信的生态，而且微信也确实搞出了开发者工具、框架、各种规范等等。&lt;/p&gt;

&lt;p&gt;然后很多报道中还会参考水果公司的经验：开发者需要从新学习一套开发语言，且已知小程序的开发和前端的套路大体一致，所以各种媒体、开发者预计前端方向可能会带一波节奏。&lt;/p&gt;

&lt;p&gt;但是，还是请前端同学冷静一下，预计【微信小程序开发工程师】可能不是个好坑。&lt;/p&gt;

&lt;p&gt;这套东西比现在前端圈子里火爆的 Vue/React/Angular 简单 N倍，有半年工作经验的前端，花一天时间仔细看完文档，再花一天练练手，基本就能开始干活了。&lt;br /&gt;
整套东西可以想象为：阉割后的 JS + Bootstrap。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;二、对技术视野有加成&lt;/h3&gt;
&lt;p&gt;阅读完小程序开发文档中有关【组件】和【API】的章节，且体验了各种演示的示例，可以让前端更了解客户端可以实现的套路。&lt;/p&gt;

&lt;p&gt;所以建议前端同学就算不搞微信小程序，还是去这套体验下示例和文档，看看大厂都是怎么玩规范的。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;三、开发体验其实并不美好&lt;/h3&gt;
&lt;p&gt;没有非黑即白，更不是除了成功就是失败。&lt;br /&gt;
任何创新都有多面性，对于优点和缺点都很明显的小程序，包容和理解更重要。&lt;/p&gt;

&lt;p&gt;小程序的开发体验其实并不美好，但是并不算太糟糕，虽然微信web开发者工具经常让我翻白眼，用这开发者工具真的分分钟就让人绝望…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/xiongmao/33.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后，一句话总结这篇文章：&lt;br /&gt;
对于前端开发者，这个微信小程序其实也就那样，但是不管是为了视野还是“钱途”，都值得尝试一下。&lt;/p&gt;

&lt;p&gt;技多不压身，你说呢。&lt;br /&gt;
over.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/weixin1/&quot;&gt;对于前端，「微信小程序」其实不美好&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on November 13, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[《岛上书店》简评]]></title>
  <link rel="alternate" type="text/html" href="/bookstore/" />
  <id>/bookstore</id>
  <published>2016-11-02T00:00:00+08:00</published>
  <updated>2016-11-02T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;按一个月看 2~3本书的节奏，一年到头肯定会读超过 20本书。其中纯技术书占三分之一，与互联网有关的书占三分之一，还有三分之一大概是人文、历史、小说之类的“杂”书。&lt;/p&gt;

&lt;p&gt;每本有价值的书都值得被记录，不管是加深理解、记忆，还是用于将来怀念，反正读完一本书，不写点神马我会觉得失落（除非这本书真的糟到不想写），所以就有了「简评」。&lt;/p&gt;

&lt;p&gt;「简评」可以直译为 简单的书评。&lt;br /&gt;
当然，&lt;strong&gt;主观&lt;/strong&gt; 是免不了的，&lt;strong&gt;剧透&lt;/strong&gt; 是人神共愤的，&lt;strong&gt;有意义&lt;/strong&gt; 是只能尽力的，但是我会努力做到 &lt;strong&gt;有趣的&lt;/strong&gt;。&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/jinguanzhang/59.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先，这本书是凑单和各种书单推荐的产物；&lt;br /&gt;
其次，只要是我自己下单选择的书，我就一定会去看，而且只要内容不过与乏味、无趣，偶都一定会认真的看完；&lt;br /&gt;
最后，哄闺女睡觉是件无比有趣的事情。因为把她哄睡了，一般我也差不多困的不行了。&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/maomi/21.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是，为了记录自己这篇刚读完的小说，还是打起精神来写点东西吧。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;一、总述&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;10/24 开始看这本书，基本每天睡前看个把小时，昨晚刚刚看完，整体用时差不多 6小时。&lt;br /&gt;
ps：有几次哄娃，把自己也顺道哄睡了，当芭比妈咪的都懂:)&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/tuzi/41.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不耽误看官们的时间，偶先给出我心中的分数：
如果按满分 五颗星来算，我给这本书 三星半。&lt;/p&gt;

&lt;p&gt;整体感触还是不错的，更因为我也有个两岁多的小公主，所以看到书中主角和养女的故事情节会有很强的代入感，真的会有加分。&lt;/p&gt;

&lt;p&gt;如果真的喜欢读书，那么这本书还是值得推荐的。因为书中的男主、女主都非常爱书，他们从事的工作就是与书有关，用书店贯穿整个剧情，作者把书和文学的意义描绘的足够丰满，能让热爱读书的你获得淡淡的幸福感（至少我是这样）。&lt;/p&gt;

&lt;p&gt;对了，这本书同样很适合姑娘们读，因为有文艺、有爱情、有悲剧、有跌宕起伏的转折。&lt;/p&gt;

&lt;p&gt;但是，真的有必要被那么推荐甚至推崇么？如下图：
&lt;img src=&quot;http://www.fefork.com/images/post/xiaodao.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好吧，姑且认为这是场网络推广的胜利。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;二、以“点”带“面”&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;分享三处此书让我有些许思考和感触的点。&lt;/p&gt;

&lt;p&gt;第一个：&lt;strong&gt;有关电子阅读器&lt;/strong&gt;&lt;br /&gt;
书中对于电子阅读器的故事描述的很有意思：男主不喜欢也不接受电子阅读器，因为男主觉得这类科技的发展毁掉了很多珍贵的东西，比如唱片、比如纸质书。&lt;/p&gt;

&lt;p&gt;这段让我想起了从《罗辑思维》里面聊到过的一本书 —— 《与机器赛跑》。&lt;br /&gt;
讲的就是在当下互联网时代，技术的高速发展会让很多人不适，甚至会让很多人生活的更加艰难，比如失业率越来越高。&lt;/p&gt;

&lt;p&gt;怀旧和追新 本身就是矛盾的，这是当下我们这一代人都需要面对的。
如果我们思维方式不能跟上互联网的脚本，那么生活就会越加的不适，这可能也是我们这一代人的宿命。
&lt;img src=&quot;http://www.fefork.com/images/em/xiaorentou/201.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二个：&lt;strong&gt;养女出现之后的主角生活状态对比&lt;/strong&gt;&lt;br /&gt;
玛雅是养女的名称，在她出现之前主角的生活之前：不爱运动、自私、待人冷漠、吃各种垃圾食品、宿醉等等，反正就是一个混吃等死的典范。&lt;/p&gt;

&lt;p&gt;当主角下决心收养玛雅之后：因为心中有了寄托，所以这份意外的“责任感”让主角的人生变得截然不同，充满了生命力和向上的态度。&lt;/p&gt;

&lt;p&gt;突然想起公司某次活动的一句口号很应景：天生不同，唯爱相同。
&lt;img src=&quot;http://www.fefork.com/images/em/tuzi/71.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第三个：&lt;strong&gt;对于开书店&lt;/strong&gt;&lt;br /&gt;
作为了比较喜欢读书的程序猿，我其实真的一直有开个小店的计划。&lt;/p&gt;

&lt;p&gt;我的爱人喜欢花花草草，也去学习过一年多的花艺，她就想等孩子再大点，然后能自己开个有意思的小花店。&lt;br /&gt;
我呢，就挨着她的小花店开个小咖啡店，然后里面有巨大的书柜，上面成列着我已经分类好的各种图书，每本书我都读过。如果顾客想要得到推荐，我会如数家珍的给其介绍。&lt;/p&gt;

&lt;p&gt;不需要赚钱，就算赔点钱也无所谓，这只是我们想过的生活。&lt;br /&gt;
希望再努力几年，找个机会让这个计划早日实现。
&lt;img src=&quot;http://www.fefork.com/images/em/jinguanzhang/27.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;三、点滴记录&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;最后，列举一下书中我喜欢的句子吧：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;书店是世界上最好的地方。&lt;/li&gt;
  &lt;li&gt;玛雅知道她的妈妈把她留在小岛书店，但是也许每个小孩在某个岁数都会遇到这种事。有些孩子被留在鞋店，有些被留在玩具店，还有些被留在三明治店。你的整个人生都取决于你被留在什么店里。她可不想生活在三明治店。&lt;/li&gt;
  &lt;li&gt;没有谁是一座孤岛，每本书都是一个世界。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;差不多就这样吧，over.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/bookstore/&quot;&gt;《岛上书店》简评&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on November 02, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[「标准」的 JS风格]]></title>
  <link rel="alternate" type="text/html" href="/standardjs/" />
  <id>/standardjs</id>
  <published>2016-10-31T00:00:00+08:00</published>
  <updated>2016-10-31T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;首先，这份 JS风格指南已经在我司的前端团队实行半年多了；&lt;br /&gt;
其次，在程序员的世界里，从入行到资深都需要面对几个世界级的难题，如：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;世界上最好的编辑器是什么？&lt;/li&gt;
  &lt;li&gt;是用空格还是 TAB？用空格还特么衍生出 2空格 VS 4空格。&lt;/li&gt;
  &lt;li&gt;JS到底要不要写分号？&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后，PHP是世界上最好的语言。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/xiaorentou/95.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vs&quot;&gt;一、规范VS自由&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;对程序员的每个个体来说，有代码规范其实不一定是好事，因为肯定会影响到写码的自由。&lt;br /&gt;
比如某程序员习惯用 Tab，团队引入了某规范说都要换成 Spaces，这对于 Tab党来说这不是“噩耗”么。&lt;/p&gt;

&lt;p&gt;尤其是对于老程序员，如果习惯多年的代码风格需要改变(先且不论好坏)，确实是件很拧巴的事情。&lt;/p&gt;

&lt;p&gt;但是对整个团队来说，有代码规范肯定是大好事。而且由于好处实在太多，比如方便管理、好维护、易阅读等等，所以我也别一条条去罗列了，大家都懂:)&lt;/p&gt;

&lt;p&gt;如果，某套代码规范甚至代码流程，能让团队中的成员都相对满意，而且还能切实的去执行…我想说：请好好珍惜这美好的时光。&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/jinguanzhang/54.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;目前，各个大厂、各种开源项目都有多种 JS的写法规范。今天本文介绍的 JS 规范号称“Standard Style”，绝对是使用最广的写法之一(star 7800+)，而且有提供配套的工具、插件可以方便的使用。&lt;/p&gt;

&lt;h3 id=&quot;js-standard-style&quot;&gt;二、介绍“JS Standard Style”&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;standardjs就是这个这个项目的名称。&lt;br /&gt;
对了，它的作者叫 Feross，建议程序员们去了解一下，你会知道程序员世界的“猛人”到底能有多凶残。&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/xiongmao/67.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;请仔细看看这篇 JS规范要点，The Rules：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;2 spaces&lt;/em&gt;&lt;/strong&gt; – for indentation&lt;/li&gt;
  &lt;li&gt;Single quotes for strings – except to avoid escaping&lt;/li&gt;
  &lt;li&gt;No unused variables – this one catches tons of bugs!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;No semicolons&lt;/em&gt;&lt;/strong&gt; – It’s fine. Really!&lt;/li&gt;
  &lt;li&gt;Never start a line with (, [, or `&lt;/li&gt;
  &lt;li&gt;This is the only gotcha with omitting semicolons – automatically checked for you!&lt;/li&gt;
  &lt;li&gt;Space after keywords if (condition) { … }&lt;/li&gt;
  &lt;li&gt;Space after function name function name (arg) { … }&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Always use === instead of == – but obj == null is allowed to check null&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt;undefined.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;Always handle the node.js err function parameter&lt;/li&gt;
  &lt;li&gt;Always prefix browser globals with window – except document and navigator are okay&lt;/li&gt;
  &lt;li&gt;Prevents accidental use of poorly-named browser globals like open, length, event, and name.&lt;/li&gt;
  &lt;li&gt;And more goodness – give standard a try today!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;没错，先不管这个规范带来了多大的好处和优点，但是我标注的两个条件确实有点要命：&lt;strong&gt;没有分号；2空格&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;有关是否有分号的讨论可以写许多篇论文了；&lt;br /&gt;
至于用 tab还是用空格…都可以引发程序员的圣战啦。&lt;/p&gt;

&lt;p&gt;所以这里看看就好，想了解更多的同学，强烈建议你私下去搜索些更多资料。ps：为毛要私下搜索？请参考下图，我其实只是想为你的安全考虑:)&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/jinguanzhang/40.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;三、先简单用起来！&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;官方的 demo 是使用 npm script 来展示的。
一句话表述：先全局安装  standard这个包，然后使用 CLI是实现后续的操作和展示。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ npm install standard –global&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这种方式很适合用作 JS代码的校验审核。如下图：&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/standardjs/s.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是如果想配合日常开发用上，达到自动提醒，甚至自动格式化的程度，我非常推荐配合着对应的编辑器插件来使用。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;四、配合编辑器插件&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;我喜欢和推荐这个规范的主要原因就是 —— 不用配置！&lt;br /&gt;
ps：如果你有了解过 ESLint，面对那各种各样的 Configuring 和 Rules，特么有几个人能坚持去看完的，反正我是放弃了。&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/xiaorentou/157.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是使用 standardjs，它已经把规则都定好了，所以如果你接受它的规则，那么直接无脑使用就行了。如下图：&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/standardjs/eslint.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;支持 standardjs插件的编辑器还是很多的，几乎前端常用的编辑器都覆盖到了：&lt;br /&gt;
  &lt;strong&gt;Sublime Text、Atom、Vim、Emacs、Brackets、Visual Studio Code、WebStorm/PhpStorm。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;篇幅有限，仅介绍下在 Atom编辑器下的使用和效果吧。Atom需要安装对应的两款插件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;linter-js-standard - Linter plugin for JavaScript Standard Style&lt;/li&gt;
  &lt;li&gt;standard-formatter - Format file contents using JavaScript Standard Style&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;效果如下图：&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/post/standardjs/standard-formatter.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;啊~这是个美好的时代。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;五：如何在项目中实现统一的代码风格&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;不是每个程序员都有代码洁癖，也不是每个程序员都偏执的想写好代码，更多的普通人其实只是想少折腾的把工作完成就好。&lt;br /&gt;
所以对于在团队内推行代码规范这种事情，顺其自然就好。&lt;/p&gt;

&lt;p&gt;但是，使用以下这套方案可以让这套规范推行的更顺畅些。&lt;/p&gt;

&lt;p&gt;第一步：项目中使用 ESLint，安装对应的包：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;eslint&lt;/li&gt;
  &lt;li&gt;eslint-config-standard&lt;/li&gt;
  &lt;li&gt;eslint-plugin-promise&lt;/li&gt;
  &lt;li&gt;eslint-plugin-standard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/standardjs/dev.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二步：编辑器安装对应插件，以 Atom举例：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;linter-js-standard&lt;/li&gt;
  &lt;li&gt;linter&lt;/li&gt;
  &lt;li&gt;linter-eslint&lt;/li&gt;
  &lt;li&gt;standard-formatter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后一步：在项目中增加的 .eslintrc，只需要一行即可&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;extends: standard&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;开发时自动格式化就这么实现了，想想是不是还有点小激动呢。&lt;br /&gt;
&lt;strong&gt;ps：希望你有颗包容的心，因为在这半年来，我们也确实遇到了一些小问题，善用 stackoverflow 和开源项目对应的 Issue，各种问题你都能找到答案。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;六、小结：聊几句优、缺点&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;对着这套 JS规范本身，一直都在泛泛而谈，优点和缺点的论述到处散落着，我在这简单梳理下我个人理解吧。&lt;/p&gt;

&lt;p&gt;有关优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;阅读代码的心情会变好&lt;/strong&gt; - 工作年限越长越能理解这句话的含义，这也是我最在意的一点，谁会有好心情去读第一眼糟糕的代码；更没有人愿意去读一个几百行，但是有几套代码风格的代码。&lt;/li&gt;
  &lt;li&gt;不用学习麻烦的 ESLint，无配置。&lt;/li&gt;
  &lt;li&gt;规范中有一条“No unused variables”没有细说，但确实非常有用。未使用的变量会进行提示，方便你优化、缩减代码，甚至定位问题。&lt;/li&gt;
  &lt;li&gt;想一想，如果团队有新人加入，不用过于担心他的代码风格了，不管他的工作年限。&lt;/li&gt;
  &lt;li&gt;有套路、好维护。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有关缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果对“JS Standard Style”的某条规范有异议，能否去修改呢？答：不能。&lt;/li&gt;
  &lt;li&gt;会影响少数人自由。单方面会冒犯到其他程序员，比如 Tab党、4空格党。&lt;/li&gt;
  &lt;li&gt;我们全团队使用 Atom，配合着对应的插件，偶尔会有点小问题。万能的 stackoverflow 和Issue 会帮助到我们。&lt;/li&gt;
  &lt;li&gt;对了，别被这套规范的名称给骗了，这其实不是真正的 JS标准，真正的 JS标准现在还在讨论的没玩没了呢。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上就是我使用这套规范的感受吧。&lt;/p&gt;

&lt;p&gt;最后，感谢已经离职的、优秀的德森同学(阿里花名“全栈”，我就问你们怕不怕)。是他强行在我们的 Nodejs Docker项目里面加上了这套玩意，让我们不得不用上了，哈哈哈哈哈哈哈哈。&lt;/p&gt;

&lt;p&gt;这篇文章确实有点长了，那么再长点也无所谓了吧，于是我找到了下面这幅图…&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;七、看图，讲一个悲伤的故事&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;如果你没有尴尬癌，强烈推荐你看这个图片的出处 —— 《硅谷》。&lt;br /&gt;
真的很多搞笑的点只有程序员才能正确 Get。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/standardjs/space_vs_tab.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就这样，over.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/standardjs/&quot;&gt;「标准」的 JS风格&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on October 31, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[年度科技脱口秀来了]]></title>
  <link rel="alternate" type="text/html" href="/smartisanos/" />
  <id>/smartisanos</id>
  <published>2016-10-19T00:00:00+08:00</published>
  <updated>2016-10-19T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;闺女来北京啦，所以每天22点左右就睡了。睡前偶还默默想着早晨起床就可以看“锤子的 2016新品发布会”的重播啦。&lt;/p&gt;

&lt;p&gt;首先，锤子和老罗这一年还是挺不容易，微博上几乎没见着几条好消息；&lt;br /&gt;
其次，俺真没买过锤子手机，但用过公司的两台测试机：一台T2、一台坚果，T2 给我的印象非常好，无论是触感还是系统交互；&lt;br /&gt;
最后，衷心的佩服 勇敢、认真的创业者，比如老罗，因为我自己确实没这勇气。  &lt;/p&gt;

&lt;p&gt;所以，带着个疑问，我渐渐入眠。这个疑问就是：“面对如此残酷的环境，这次的新品能否给锤子和老罗续命呢”。&lt;br /&gt;
因为期待年年都能听到老罗长篇的单口相声。这种发布会也是这个时代，属于我们互联网从业者的一道调味品吧。&lt;/p&gt;

&lt;p&gt;ps：微博上有各种传闻，有一种说法是“这场是老罗最后一场单口相声”，当然，我不愿意看到这样的情景。&lt;br /&gt;
记录于 10/18日晚。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;果然，早上起床刷朋友圈，都是一大波锤子相关的内容报道(请自行断句)。&lt;br /&gt;
但是当看到 M1/M1L 的照片，我真的有点失落：真特么太像 iPhone了！这个企业不是号称工业设计怎么怎么牛逼么，拿了无数这奖、那奖么，为毛这种玩烂了的外观设计也能拿的出手？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/xiongmao/88.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;酷似苹果的外观就算了，那个皮革的咖啡金又是什么鬼！！！为什么好好的、正常的金色不搞，搞了这么一个鬼颜色。&lt;/p&gt;

&lt;p&gt;于是失落的我还是打开了新品发布会的视频，希望能从单口相声中找点安慰。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/xiaorentou/253.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;果然，热爱老罗的我又被充值了，于是才有了这篇文章。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/t.tt.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整个发布会其实可以分为上下两个半场来看。&lt;br /&gt;
对我来说，上半场略有点乏善无趣，下半场其实还是有很多爆点的。先抑后扬的套路你懂的。&lt;/p&gt;

&lt;p&gt;发布会的内容已经被很多互联网媒体轮番报道了，作为锤子的非核心用户，我也不打算再捋一遍，这里我只想瞎扯一些媒体们不太说到的话题。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;为毛不叫T3，而叫M1/M1L呢？&lt;/strong&gt;&lt;br /&gt;
  原满心以为等来的是“T3”，但结果来的是一大一小俩兄弟，分别是 5.15英寸和 5.7英寸的 M1、M1L。很多媒体说名称不重要，但是真的不重要么？看看锤子后续会不会重新发布 T系列的产品。&lt;br /&gt;
  不过听说 T系列后续会主打设计方向，M系列会主打性能方向。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;T1/T2都有的实体键呢？&lt;/strong&gt;&lt;br /&gt;
  估计是为了提供指纹识别的功能，所以原本 T系列的长条实体键也只能放弃了。&lt;br /&gt;
  其实我个人对于实体键无感，去掉就去掉吧。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;对于咖啡金。&lt;/strong&gt;&lt;br /&gt;
  第一眼真的不觉得好看，细细一想，可能这也是种特点吧。。。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;多宝盒的外包装。&lt;/strong&gt;&lt;br /&gt;
  曾经第一次被锤子的“情怀”充值是就是因为他们对包装的用心。&lt;br /&gt;
  虽然现在手机厂商对于包装都更个性和更花心思了，但相信对于锤子这种设计能力溢出的企业，当你打开其包装的时候就能感受的到“被充值”的感觉。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;充电的时候能看到每一丝电量的增长。&lt;/strong&gt;&lt;br /&gt;
  看到这功能的时候其实我心想：做这功能的人特么是有多无聊呀！&lt;br /&gt;
  但是这也是锤子的特点，也是以为我喜欢锤子的原因，为了一些不明所以的执着而感动（我这个算黑么）。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;可以设置指纹解锁的时候调起微信或者支付宝的付款页。&lt;/strong&gt;&lt;br /&gt;
  尼玛，花钱更方便了有木有。&lt;br /&gt;
  不敢想象，如果特么有人用中指解锁去付款…我想我会忍不住抽他。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;对于讯飞输入法。&lt;/strong&gt;&lt;br /&gt;
  确实从没想过在手机上用过语音输入，真有点被震住了。&lt;br /&gt;
  老罗把手指形容为“胡萝卜”，无比的形象呀，莫名的喜感。&lt;br /&gt;
  按理说，中文的语音识别当属百度最强呀，毕竟搞了那么久的AI（从2014年NG加入百度开始，几乎每次百度世界大会上就在说人工智能）。但是百度输入法就木有语音输入的功能，期待也能加上吧。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Big bang 和 One Step。&lt;/strong&gt;&lt;br /&gt;
  今儿已经被各大媒体说来说去的黑科技，真要我解释起来也比较麻烦，所以我这就多提一嘴：对于国内用户的使用场景和痛点，确实锤子有脑洞。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;对于开源。&lt;/strong&gt;&lt;br /&gt;
  手工点赞。将 Big Bang 和 One Step 项目开放源代码，纳入 Android 世界开源。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;对于朱萧木。&lt;/strong&gt;&lt;br /&gt;
  首先，颜值肯定是担当；但是感觉这个产品总监，说段子和抖包袱的能力还是差了点意思，尤其是和老罗同台。不过横向比起其他发布会的演讲者，做的已经足够足够好了，毕竟老罗在这圈子确实算作异类。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我觉得有意思的点就以上这些，其他比如摄影或者各种配置就比较无趣了。&lt;br /&gt;
其实真正的用户有几个真的能搞懂这些配置的价值么，懂配置的发烧友又真的会买锤子么。&lt;/p&gt;

&lt;p&gt;对于这款外观另我失落，但是系统、软件、配置等都诚意满满的产品，希望能大卖吧。&lt;br /&gt;
更望老罗的单口相声越办越好。&lt;/p&gt;

&lt;p&gt;最后：家中领导不批钱钱，俺只能期待公司的新测试机了。&lt;br /&gt;
over.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/smartisanos/&quot;&gt;年度科技脱口秀来了&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on October 19, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[提问是门艺术]]></title>
  <link rel="alternate" type="text/html" href="/tiwen/" />
  <id>/tiwen</id>
  <published>2016-10-12T00:00:00+08:00</published>
  <updated>2016-10-12T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;不平静的十一假期这么快就结束了。前些天北方大降温，目前在帝都的偶已穿上了秋裤。&lt;/p&gt;

&lt;p&gt;然而最近几天晚上被冻醒数次，这是逼劳资换下喜洋洋的空调被，换上俺心爱的粉色棉被呀。
这就腻害了，我的哥&lt;br /&gt;
&lt;img src=&quot;http://www.fefork.com/images/em/jinguanzhang/16.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;常常会收到小伙伴们的各种问题留言，但真的精力、能力有限，近些年已较少去回复各类的问题啦（曾经年少的偶可是各种 留言、邮件 都会去尽力答复的有痔青年）。&lt;/p&gt;

&lt;p&gt;俺当然非常乐意去回答那些 优质 的提问，因为这些问题更有意义。而且 好问题 是值得花时间去探索的，最终的收获也是双方面的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/baozou/136.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是，下列类似的问题真的让人有种深深的无力感（神烦），比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;格式混乱的问题，叫人怎么能有心情看；&lt;/li&gt;
  &lt;li&gt;过于主观的问题，如 “JS 总学不好，请问有什么经验之谈吗？”，“有什么前端书籍推荐吗？”，“ES6 有点看不懂，请问该不该放弃？”，“现在学 Nodejs 是不是晚了？”；&lt;/li&gt;
  &lt;li&gt;没有价值的问题，如 “你推荐的那本 《XXX》 有电子版吗，请发我 XXXX 邮箱。”，“那个 XXX 功能希望得到你的帮助。”&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不想再列下去浪费各位流量了，反正有加入技术相关的 QQ 群，都见过类似的不经大脑的问题。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;拒绝伸手党 是所有程序员的责任。&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/xiongmao/10.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;工作和生活中遇到问题是常态，没有问题才是不正常的。所以，通过 &lt;strong&gt;善用搜索引擎&lt;/strong&gt; 或者 &lt;strong&gt;寻求他人帮忙&lt;/strong&gt; 都是职场中基本的求生技能。&lt;/p&gt;

&lt;p&gt;搜索引擎能搞定的时候当然就不用去寻求帮忙了，但工作里很多千奇百怪的问题还是得经常通过寻求帮忙来解决。&lt;/p&gt;

&lt;p&gt;当然，寻求帮忙的能力也是 社交能力、工作经验 的体现，而且 好提问 肯定也是思考后得出的智慧结晶。所以多提出优质的问题，也是种贡献呀（比如「知乎」）。&lt;/p&gt;

&lt;p&gt;———— &lt;strong&gt;&lt;em&gt;以上都是废话&lt;/em&gt;&lt;/strong&gt; ————&lt;/p&gt;

&lt;p&gt;不管是神马岗位，把问题表达清楚 都是职场的必备。&lt;/p&gt;

&lt;p&gt;我是幸运的，程序员生涯的第一份工作遇见了个严厉的导师(伏哥)，被骂哭和教育过几次，对于情商不高、社交能力不强的我终于懵懂理解怎样去提问。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/tuzi/73.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;互联网时代造就了这个浮躁的大环境，程序员在这个时代里会被种莫名的优越感加持。&lt;/p&gt;

&lt;p&gt;而且可能 提问者/回答者 都太忙了，所以对 &lt;strong&gt;“劣质的问题”&lt;/strong&gt; 和 &lt;strong&gt;“不和善的回答”&lt;/strong&gt; 的容忍度着实不高。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/baozou/76.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以程序员互相交流中，真的需要 &lt;strong&gt;珍惜每次提问的机会&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;而且准备好对应的资源之后再发问，也更有利于你的问题能够高效、高质量地得到反馈。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;向人提问之前的准备：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;善用搜索引擎&lt;/li&gt;
  &lt;li&gt;万能的爆栈网（stackoverflow）&lt;/li&gt;
  &lt;li&gt;文档！文档！文档！&lt;/li&gt;
  &lt;li&gt;明确知晓问题该问谁(或问哪群人)&lt;/li&gt;
  &lt;li&gt;尊重对方的时间(尤其是对领导，比如先预约个时间)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/maomi/14.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;向人提问时的方式：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;问题描述不再多，用精简的、双方都懂的言语表达清楚；&lt;/li&gt;
  &lt;li&gt;口头对话的内容得有记录&lt;/li&gt;
  &lt;li&gt;最最重要的一项：&lt;strong&gt;记得感恩&lt;/strong&gt; !&lt;br /&gt;
具备解决问题能力的人，通常时间都很宝贵。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/jinguanzhang/29.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;怎样提出个好问题呢？&lt;/h3&gt;

&lt;p&gt;昂…&lt;br /&gt;
这问题我确实答不上来，因为我自己就是个不擅长提问、也很少提问的性格。&lt;br /&gt;
但是我个人感觉，提出好问题的套路可以参考提 Bug 的套路。&lt;/p&gt;

&lt;p&gt;在程序的世界里，八阿哥(Bug) 是个神奇的存在。如果你是一名互联网从业人员，请思考下觉得 &lt;strong&gt;怎样提 Bug 比较好呢&lt;/strong&gt;？&lt;/p&gt;

&lt;p&gt;如何优雅的提 Bug 给程序员，其实关键就是 让他没有拒绝的理由。&lt;br /&gt;
不要光讲些没有营养的话，如 “XX 功能有问题”，“XX 显示有误”，“XX 效果比较奇怪”…这种没有营养的内容，怎么能让注重效率而且“懒”的程序员心甘情愿的去查。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/xiaorentou/104.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;工作中是否「专业」，正确的提问姿势很重要。如提给前端的某 Bug，除了具体的问题之外，最好还得有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;网络环境、具体机型&lt;/li&gt;
  &lt;li&gt;浏览器以及版本、系统以及版本&lt;/li&gt;
  &lt;li&gt;是否必先以及重现方式&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/xiaorentou/113.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那再回到刚刚的问题 —— “怎样提出好问题？”。&lt;/p&gt;

&lt;p&gt;提问的目的都是为了答案。伸手党们会到处高喊“请给我答案”；聪明的提问者会让他人感受到问题中的智慧和思考。&lt;/p&gt;

&lt;p&gt;如果你觉得自己暂时不会提问，那请你先做到不要让自己的问题使他人反感。&lt;br /&gt;
提问之前先问问自己：“为什么我要这么问”。&lt;/p&gt;

&lt;p&gt;问得不同，人生便不同 —— 这里推荐感兴趣的伙伴们阅读《提问的艺术》。&lt;br /&gt;
本书会从商业、社交、人生三个维度来启发我们。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/tiwendeyishu.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“想得到正确的答案吗？前提就是要问正确的问题。”这是本书的主旨。而提出正确问题的方法则是是作者希望每个读书者从书中收获的技能。为此书中在不同章节后面列出了总共320个问题。&lt;/p&gt;

&lt;p&gt;最后，提问这种依赖人与人沟通的事情，肯定会出现得不到答案，或者答案欠佳的情况。&lt;br /&gt;
遇到这种时候请放轻松，因为你慢慢就会习惯了，最终你也会懂得 &lt;strong&gt;善用搜索才能受益终生&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/jinguanzhang/58.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;over.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/tiwen/&quot;&gt;提问是门艺术&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on October 12, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[如何做好技术串讲]]></title>
  <link rel="alternate" type="text/html" href="/share/" />
  <id>/share</id>
  <published>2016-09-26T00:00:00+08:00</published>
  <updated>2016-09-26T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;首先，如何做好演讲是个好话题，不过这过于大众的主题不想写，除非哪天能想到点 新意 再说；&lt;br /&gt;
其次，串讲和演讲有啥区别呢？其实也没啥区别，一会儿说说我自己的理解；&lt;br /&gt;
最后，什么时候做技术串讲也分情况，这个最后会说到。  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;背景介绍：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我司使用 Nodejs 大概两年多，不过分为好些独立的方向，且各自有其技术负责人。  &lt;/p&gt;

&lt;p&gt;这月初，高(神)大(叨)上(叨)的CTO安排几个技术负责人分别把手头的项目好好整理，组织我们相互的串讲。目的不多解释，就是为了加深我们同事之间的基情嘛(如果我说目的是为了“一起背锅”，那肯定是偶价值观有问题了嘛:P)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/tuzi/89.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么是技术串讲？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“就是把要讲的知识点，从头到尾讲一遍，讲解中举一些例子加强理解。串讲主要以讲为主，不需要多少互动和练习，串讲之后可以辅之以一些练习。” —— 百度百科  &lt;/p&gt;

&lt;p&gt;我对技术串讲的理解就是：&lt;strong&gt;把要讲的技术主题，【方方面面】都说的有条理、够清晰。&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;串讲和演讲有啥区别？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其实嘛，也可以说没啥区别。&lt;br /&gt;
说点我自己的理解：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;串讲基本是对内的，演讲对内对外即可；&lt;/li&gt;
  &lt;li&gt;串讲是有考核机制的，不令人满意的串讲会被重新安排串讲；&lt;/li&gt;
  &lt;li&gt;演讲当然对PPT要求高些；串讲对文档积累要求高些；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;引用段在微博上看到的有关演讲的段子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/share.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分享下偶自己有关技术串讲的套路：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;背景或历史的介绍&lt;/li&gt;
  &lt;li&gt;​项目架构图或思维导图&lt;/li&gt;
  &lt;li&gt;文件夹目录讲解 - 如文件名含义、套路、配置等&lt;/li&gt;
  &lt;li&gt;开发/测试/上线 流程 - 如线上机器地址，测试机器地址&lt;/li&gt;
  &lt;li&gt;各种预案 - 如部署、bug定位等&lt;/li&gt;
  &lt;li&gt;代码细则/逻辑细则 介绍&lt;/li&gt;
  &lt;li&gt;如何调试 - 如有木有后门&lt;/li&gt;
  &lt;li&gt;存在的问题 - 如历史包袱之类&lt;/li&gt;
  &lt;li&gt;未来的改进&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;PS：自行挑选，以上每项都可视情况砍掉哈~  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;神马时候应该做技术串讲？&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;转正前&lt;/li&gt;
  &lt;li&gt;接手新项目&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是，&lt;strong&gt;往往技术串讲都是什么时候呢？&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;出问题之后&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;好吧程序员们，这就是真相~~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/maomi/22.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;over.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/share/&quot;&gt;如何做好技术串讲&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on September 26, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[「微信小程序」来了]]></title>
  <link rel="alternate" type="text/html" href="/weixin_appstore/" />
  <id>/weixin_appstore</id>
  <published>2016-09-22T00:00:00+08:00</published>
  <updated>2016-09-22T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/weixin_app.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ps：微信APP Store、微信小程序、微信应用号都是指同一个事情。&lt;/p&gt;

&lt;p&gt;苦逼程序猿刚下班到家，还没来得及洗漱，收到条小道消息的推送。于是我有气无力的拿着手机点开了这条推送消息，映入眼帘的就是这张封面图片。&lt;/p&gt;

&lt;p&gt;首先，已经有不少人拿到微信小程序的内测；&lt;/p&gt;

&lt;p&gt;很荣幸，劳资连需要啥资格都不太了解。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/baozou/75.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;微信小程序是个什么鬼呢？下面这段引用是从微博抄来的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;什么是小程序：小程序是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或者搜一下即可打开应用。也体现了“用完即走”的理念，用户不用关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无需安装卸载。– Allen Zhang&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过各种微信群，终找到了其开发文档截图，如下面两张：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/WechatIMG48.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/post/WechatIMG49.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果了解过微信 JS SDK 的伙伴一定觉得：卧槽，微信团队真够替前端考虑的，又特么是这套差不多的东西。&lt;/p&gt;

&lt;p&gt;有前端 HC 的赶紧招人吧，预计下半年能看入眼的前端会更难招了。&lt;/p&gt;

&lt;p&gt;目前这个开发套路也没啥好多聊的(废话，靠YY劳资也编不下去了呀)，我想和感兴趣的前端小伙伴们说：先把技术储备准备起来吧，以下内容请自行搜索：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;微信JS SDK&lt;/li&gt;
  &lt;li&gt;WeUI&lt;/li&gt;
  &lt;li&gt;Vux&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;技术就先扯到这。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;曾在百度移动事业部待过几年，有幸接负责过 APP阿拉丁 的开发。特么看到这套东西真的无比想念 2014年百度主推的 轻应用 + 直达号。&lt;/p&gt;

&lt;p&gt;同样宣传不需要开发 APP；同样提供各种工具和框架；同样友好对待开发者；同样能轻松搭建 Web 应用；同样能兼顾好展示效率；同样有审核门槛机制…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;看微信小程序，不禁为百度轻应用默哀，很多时候，不是说你有一个想法，而是，你需要一个支撑你的想法的土壤。——KentZhu&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;微信APP Store？会不会最终又类似 「Chrome OS + Chrome 应用商店」呢。无论如何，希望微信能打好这场史诗级的副本，因为中国互联网和世界互联网都极度需要这种现象级的”创新”，不管最终是大浪还是小浪。&lt;/p&gt;

&lt;p&gt;最后，期待微信如何下这盘大棋；阿里又会如何应战；各种APP大厂的接入各需要多久；静观中小型H5服务商们如何转变…&lt;/p&gt;

&lt;p&gt;这真是个美好的时代。&lt;/p&gt;

&lt;p&gt;最后的最后：谢天谢地，我居然还是个前端。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/xiongmao/91.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/weixin_appstore/&quot;&gt;「微信小程序」来了&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on September 22, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[公众号 -「前端攻略 开光篇」]]></title>
  <link rel="alternate" type="text/html" href="/gongzhonghao/" />
  <id>/gongzhonghao</id>
  <published>2016-09-21T00:00:00+08:00</published>
  <updated>2016-09-21T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;作为一枚程序员，每件重要项目的开始都忍不住使用”Hello World”。&lt;/p&gt;

&lt;p&gt;这个公众号是不是来晚了？如果你有这个疑问，那么我想说：对于写作和思考，任何时候都不晚。我用四个简单的自问自答，来讲讲这个前端攻略公众号的初衷。&lt;/p&gt;

&lt;p&gt;欢迎关注，感谢~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/qrcode.jpg&quot; alt=&quot;聂微东公众号&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;为什么要开这个公众号？&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;阅读和写作是我最大的爱好。写作让我静心，让我更好的思考，经常也是我减压的方式；&lt;/li&gt;
  &lt;li&gt;从2010年开始写博客至今，已坚持有些年头，一直觉得“是该探寻个新方式”，所以开通公众号来继续 &lt;strong&gt;写&lt;/strong&gt; 也成了最佳的选择；&lt;/li&gt;
  &lt;li&gt;GitHub Pages发图片不太方便，不能很好展示我逗逼的写作风格。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/jinguanzhang/33.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;个人博客的后续计划&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先博客会继续更新，公众号发的文章也会全部再放到这里来，只不过会稍晚个一天左右吧；&lt;/li&gt;
  &lt;li&gt;需要罗列大段代码的纯技术文章，只会放在博客，公众号毕竟不适合阅读这种文章；&lt;/li&gt;
  &lt;li&gt;比较偏生活的个人文章，也只会放博客&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;简单点说，博客照旧。不过，更期待您关注偶的公众号，可以尽情调戏偶…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/maomi/08.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;公众号的目标是？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不知不觉间已经成家，不知不觉间闺女已经可以满街跑，偶然间自己总会焦虑。已到而立之年了，那我还能做些什么呢？&lt;/p&gt;

&lt;p&gt;思考后我告诉自己，&lt;strong&gt;找个自己热爱方向的坚持做下去，因为这样才会有成就感和乐趣&lt;/strong&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;好吧，那趁着自己还能写、还想写，那就逼着自己多写一些吧；&lt;/li&gt;
  &lt;li&gt;一直有个出书的梦想，虽暂时没精力去做，但也算时刻准备着嘛。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/jinguanzhang/43.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;会推送些什么内容呢？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我现在是名工程师，且有幸（或不幸）待过多种多样的互联网公司，如按时间的先后顺序排列：外包、外企、创业、大公司、初创、小公司。&lt;/p&gt;

&lt;p&gt;杂乱的工作履历和杂乱的阅读习惯，让我除了技术之外还有很多想记录下来的文字。&lt;/p&gt;

&lt;p&gt;但归根结底，这里所记录的一切都只会与 Web技术、创业思考、好书分享、科技咨询 这类有关。
我会努力保证每篇推送文章的质量哒。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/em/baozou/247.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后，希望自己能一直铭记这些初心。&lt;/p&gt;

&lt;p&gt;同样，也愿你能不忘初心。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/gongzhonghao/&quot;&gt;公众号 -「前端攻略 开光篇」&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on September 21, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[《拖拉一点也无妨》小记]]></title>
  <link rel="alternate" type="text/html" href="/procrastination/" />
  <id>/procrastination</id>
  <published>2016-09-06T00:00:00+08:00</published>
  <updated>2016-09-06T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;首先，这本书挺薄的，慢速阅读基本半天至一天就可以读完；
其次，这是我第二次读这本书，上一次貌似是两、三年前了；
最后，这是一本拖了 &lt;strong&gt;15年&lt;/strong&gt; 才写成的小书，作者是究极的拖延者。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fefork.com/images/delay_matter.jpg&quot; alt=&quot;《拖拉一点也无妨》&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一次读这本书时没啥共鸣，完全就当做周末打发时间的杂书刊物，所以也就懒得去记录些什么；
不知为何，这次重读居然引动了体内的洪荒之力(貌似我是个隐性的拖延者)，被书中一些经典的句子产生暴击伤害。&lt;/p&gt;

&lt;p&gt;这种感觉就对了，所以这篇文章也因此而来:)&lt;/p&gt;

&lt;p&gt;希望你看完之后能更了解自己的“懒”，或对这本书起了兴趣从而去阅读，这对我来说都是最好的鼓励。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我自己也算是工具达人(自认为的)，但是我很少使用时间管理或者目标管理类的软件，通常有事情就用笔默默记在手边的小本子上，完成一件就默默划掉；
很小的时候家里从事过钟表生意，从一年级入学时，父亲就让我养成带手表的习惯，&lt;strong&gt;守时&lt;/strong&gt; 就是我从小灌输在脑海里的习惯。&lt;/p&gt;

&lt;p&gt;可随着现在到了而立之年，需要同时面对和处理的事情越来越多、越来越杂，出现所谓的 &lt;strong&gt;特殊情况&lt;/strong&gt; 也越加频繁，不守时的现象也伴随着时常出现了。&lt;/p&gt;

&lt;p&gt;这也是为什么前几年第一次看这书时无感，但最近看觉得当头一棒的由来。&lt;/p&gt;

&lt;p&gt;无论任何时候，这种“不守时”的出现都会另我很懊恼和焦虑，觉得自己越来越堕落，担心自己变成自己原本讨厌的那种人。&lt;/p&gt;

&lt;p&gt;如果你对事情的拖延有负罪感，那么遗憾的恭喜你：你也是个拖延症患者，但是这其实也没什么大不鸟~&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;刚好，随手翻书柜时，又让我拿起了这本书，这次读完它居然让我不再这么懊恼了。&lt;/p&gt;

&lt;p&gt;然后体现程序猿性格的时候到了，偶又找了不少零零碎碎和拖延症相关的资料，其中最推荐的是罗振宇的一期视频 &lt;strong&gt;《罗辑思维：大家都有拖延症》&lt;/strong&gt;，内容足够有意思，比下决心去读完《拖拉一点也无妨》要容易的多啦~&lt;/p&gt;

&lt;iframe height=&quot;498&quot; width=&quot;510&quot; src=&quot;http://player.youku.com/embed/XNTk2NDI0NDg4&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;视频刚开始，就有一句话笑喷了我：“有一本书说上说 拖延症的人大概占到人口的70%到80% 这完全是胡说八道 据我所看 应该是百分之百的人都有拖延症 你就自己想吧 &lt;strong&gt;你是不是有家里买了 但是到现在封皮都没拆的一本书搁在书橱里 如果有 这就是拖延症的症状&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;再列一句罗胖对拖延症的定义，我觉得确实概括的好理解：“&lt;strong&gt;一件事情 你明知道这件事该干 但是你就是拖着不去干；但是你拖着不干的同时 你心中还有强烈的焦虑感和负罪感。 拖拉、焦虑、负罪三条凑齐，就是拖延症。 要是拖延了但没有焦虑和负罪感 那就不叫拖延症。 那就叫没心没肺、懒汉一条。&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;但视频中给我印象最深的不是大段大段讲拖延症那些，反而是视频最后的最后，罗胖说他四十岁了，他讲到了一些他对“四十岁”的感悟，确实让我这个三十岁的程序猿陷入长久的思考…好吧，我承认通过这个视频我对罗振宇路转粉了。&lt;/p&gt;

&lt;p&gt;视频里还有非常多有意思，甚至再我看来很有争议内容。但是，看完这个视频，我确实从“不再这么懊恼”变成 &lt;strong&gt;神清气爽&lt;/strong&gt;:)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;再回到这本书的书名“拖拉一点也无妨”。
确实无论我们怎么看待这个“拖延症”，其实它都不是什么大问题。而且我越了解拖延，越觉得心理更坦然了，那种懊恼的感觉逐步被冲淡，可能这也是这本书最大的目的吧。&lt;/p&gt;

&lt;p&gt;最后，不要抱着“治病”的心理去看这本书甚至是这类书。这本书写的很有趣，但是自身的拖延问题并不能依靠读这类书去“治愈”，因为这仅仅是意志力想偷个懒的体现罢了。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;怎么去解决拖延问题呢？&lt;/h3&gt;

&lt;p&gt;我不想把各种书里面的那些所谓的 &lt;strong&gt;解决办法&lt;/strong&gt; 都摘出来总结，因为我个人感觉这些东西全部都 不靠谱！
因为不管是使用哲学去解释心理问题，还是使用各种管理工具去督促自己，最终所依靠的都是自己的意志力、对事物的判断力(哪些事重要哪些不那么重要)和阅历(所以年龄越大对于拖延也会越无所谓吧)。&lt;/p&gt;

&lt;p&gt;除了这本书，这篇文章的最下面我还列举了一些相关的推荐资源，同样建议感兴趣的你去阅读、观看。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最后，列几段《拖拉一点也无妨》里面非常有意义或有意思的句子吧：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;烂的开始是完成的一半。&lt;/li&gt;
  &lt;li&gt;四月不减肥，五月徒伤悲，六月徒伤悲，七月徒伤悲，一生徒伤悲…&lt;/li&gt;
  &lt;li&gt;所有拖延人士都拥有一流的自欺本领。&lt;/li&gt;
  &lt;li&gt;上网逛逛没问题，可别迷路。&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;相关资源推荐：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://item.jd.com/10075629.html&quot;&gt;《拖延心理学》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://v.youku.com/v_show/id_XNTk2NDI0NDg4.html&quot;&gt;《罗辑思维：大家都有拖延症》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://item.jd.com/11339014.html&quot;&gt;《戒了吧！拖延症》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://item.jd.com/10406129.html&quot;&gt;《番茄工作法》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再推荐一个时间管理相关的软件：
- &lt;a href=&quot;https://www.focusboosterapp.com/&quot;&gt;focus booster&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt; 已经够用，当然还有更高级的 &lt;code&gt;INDIVIDUAL/PROFESSIONAL&lt;/code&gt;，售价分别是 &lt;code&gt;$3/$5&lt;/code&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;下一篇预计是与 &lt;strong&gt;技术分享&lt;/strong&gt; 相关，讲解如果做好一个团队内的技术串讲(分享)。&lt;/p&gt;

&lt;p&gt;差不多就这样，over&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/procrastination/&quot;&gt;《拖拉一点也无妨》小记&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on September 06, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[2016过半]]></title>
  <link rel="alternate" type="text/html" href="/2016half/" />
  <id>/2016half</id>
  <published>2016-08-04T00:00:00+08:00</published>
  <updated>2016-08-04T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://www.fefork.com/2015%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/&quot;&gt;《2015简单总结》&lt;/a&gt;是三月初写的，当前是八月四日，农历的七月初二。&lt;br /&gt;
所以告诉大家一个好消息，还有不到六个月过年…&lt;/p&gt;

&lt;p&gt;作为一枚已婚已育的大龄程序猿，最近偶又有了一些新的生活体会。&lt;br /&gt;
妻子、父母、孩子在身边的时候，一切都得以他们为核心，自己当好一个小蜜蜂就行，不要想着辛苦或计较着付出，他们开心便是莫大的幸福…想念偶在老家的闺女和云姐T.T&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2009年毕业至今，懵懵懂懂的已经在行业里摸爬滚打七年有余。&lt;/p&gt;

&lt;p&gt;七年之痒暂时还没有。&lt;/p&gt;

&lt;p&gt;看来我还是幸运的，选择了热爱的事情作为自己的事业，七年过去了依旧享受其中、乐此不疲。&lt;/p&gt;

&lt;p&gt;有时会想到，如果我当初选择的是部队或警察现在又是怎样的光景。&lt;/p&gt;

&lt;p&gt;还好，&lt;strong&gt;时间&lt;/strong&gt; 没有“如果”。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;半年工作回顾&lt;/h2&gt;

&lt;p&gt;作为公司招到的第一个前端，俺也祸害了不少项目啦。ES5/ES6/Babel 穿插；Async/Promise/Generator 见缝插针；Koa/Express 想到啥用啥；jade 用不爽又换 Handlebar；React 还没吃透又去研究 Vue；Flux 没整明白就开始用 Reflux；Reflux 还没玩转接着开始推 Redux…今年已经陆续开始各种重构…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iOS 工程师没能当上，Swift 也没有继续坚持看下去了。原因是我们有个资深的 iOS 同事转服务端了，然后另我备受鼓舞，于是就不学了，不学了…&lt;/li&gt;
  &lt;li&gt;梳理和规范偶们的 Gulp 套路。在 Git 上也开源了一个小 demo：&lt;a href=&quot;https://github.com/nieweidong/gulp-demos&quot;&gt;gulp-demos&lt;/a&gt;；也写了两篇文章用于梳理和思考，&lt;a href=&quot;http://www.fefork.com/gulp_1/&quot;&gt;《Gulp使用小结(上)》&lt;/a&gt;/&lt;a href=&quot;http://www.fefork.com/gulp_2/&quot;&gt;《Gulp使用小结(下)》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;引入 &lt;a href=&quot;http://standardjs.com/&quot;&gt;JavaScript Standard Style&lt;/a&gt; 和强大的 ESLint，配合着 Atom 插件，让偶们的 JavaScript 代码更加规范和美观&lt;/li&gt;
  &lt;li&gt;Node 项目落地了 &lt;a href=&quot;https://github.com/bluedapp/node-qconf&quot;&gt;node-qconf&lt;/a&gt;，意愿让各种配置依赖更加简便、可控。但是，现在还有点问题，比如做不到热加载，配置更新后 Node 也得重启才生效，尴尬…下半年继续折腾这块。&lt;/li&gt;
  &lt;li&gt;把 Async 和 Promise 的项目都重构为 Generator，为了更方便阅读和维护&lt;/li&gt;
  &lt;li&gt;公司开始尝试使用 Docker，偶的一个 Node 项目当了小白鼠，已经部署上去有个把月啦。总体感觉还是比较腻害的，只是目前没有更有经验的人把整个基于 Docker 的各个环节做的更好，所以莫名有种不踏实的感觉。&lt;/li&gt;
  &lt;li&gt;React 又开始用起来了，各种后台项目可以让 React 大显身手。还有，ant.design 的文档和设计确实不错。&lt;/li&gt;
  &lt;li&gt;陆续把几个 Node 项目从4.x升级为6.x，喜欢用新语法的小伙伴 happy 了；升级前后确实遇见了几个小语法问题报错，不过都比较好改，没啥好多说的。&lt;/li&gt;
  &lt;li&gt;又开始捣腾数据了，这是个魔咒…在百度那会儿搞数据还挺郁闷，现在觉得只要能学新东西就蛮开心哒~&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;差不多就是这样，零零散散的半年，把“打杂”贯彻的很彻底:)&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;生活/学习 回顾&lt;/h2&gt;

&lt;p&gt;半年过去了，生活中最满意的是体重。相比于过年前的132左右，目前已经减到122左右，而且保持有些日子了，感觉我的个头配这体重还算不错，继续保持住就行，哇哈哈~&lt;/p&gt;

&lt;p&gt;说说上半年开发过的事情吧：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;体重控制的还行。每周快走或者慢跑三次，基本隔一天运动一次，每次3~5公里，30分钟左右。从五一后开始坚持，很享受这个过程，应该会继续坚持下去。&lt;/li&gt;
  &lt;li&gt;100多期的《晓松奇谈》一集没漏的全部看完。有些感兴趣的方向甚至看了两遍，比如讲台湾的系列；同时也记录了非常非常多的笔记，很杂乱。等我把《鱼羊野史》看完，再一起回头梳理下这些笔记吧。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nieweidong/fetool&quot;&gt;fetool&lt;/a&gt; 过年前是700多 star，现在刚过1400，差不多月均100，感恩。这个项目偶会持续花心思搞好，继续努力！在我眼里这个项目不仅仅是个收集器，因为每一个所列的 Case，我都会努力去试用、使用、理解、甚至去看各种源码，这个过程让我收获巨大。也单独整理输出了 &lt;a href=&quot;http://www.fefork.com/chrome_plugins/&quot;&gt;《Chrome插件整理》&lt;/a&gt; 和 &lt;a href=&quot;http://www.fefork.com/mac_soft/&quot;&gt;《Mac 软件篇》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;四月清明时节回了次老家，在来回的火车上把《硅谷之谜》看完了。感觉没有看《浪潮之巅》时的心情澎湃，缺少点震撼力的论证和内容，可能是我自己对吴军老师的书期待太多。但是此书整体感受还是不错的，逻辑性一贯的严谨，不过稍有点啰嗦。&lt;/li&gt;
  &lt;li&gt;《七周七语言》 —— 历时个把月终于把《七周七语言》看完了，近几年看的技术书，这本是最花时间和最难坚持的。整体感受挺好，不过前几章读的比较爽(说Ruby/Io/Prolog/Scala)，后面几章精力没那么好，而且难啃的东西又多，所以有些懈怠，等过个一年半年，这本书可以再好好重读一次。&lt;/li&gt;
  &lt;li&gt;神叨叨写了篇&lt;a href=&quot;http://www.fefork.com/startup/&quot;&gt;《如果我去创业》&lt;/a&gt;，以后想着点就更新点，希望将来真去创业的时候用的上:)&lt;/li&gt;
  &lt;li&gt;读高中的时候就学过人物摄影，上半年又想学视频剪辑，打算给闺女和云姐剪辑些有意思的录像，结果完美诠释了《Final从下载到放弃》&lt;/li&gt;
  &lt;li&gt;读了《JavaScript数据结构与算法》，书不厚，所以读起来也没有压力，内容真比较有意思，和其他讲实战的书完全不一样，尤其是关于 “图”的那篇，&lt;strong&gt;推荐阅读&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;上半年有练了半个月的字吧，自我感觉暂时能凑活，所以已经没坚持了…囧&lt;/li&gt;
  &lt;li&gt;每天记10个单词（百词斩还不错）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实还看了挺多前端相关的书籍，但是感觉没太多意思，所以就不啰嗦一一列出来了，等年底的年度总结再搞个书单排序。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;下半年清单&lt;/h2&gt;

&lt;p&gt;工作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;各种 前端/Node 项目的重构&lt;/li&gt;
  &lt;li&gt;优化 Node 的中间件套路&lt;/li&gt;
  &lt;li&gt;各种项目环境自动搭建&lt;/li&gt;
  &lt;li&gt;利用 React 搭建运营活动的前后台&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;调研计划：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Electron&lt;/li&gt;
  &lt;li&gt;Weex/RN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;计划书单：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;《鸟哥的Linux私房菜》&lt;/li&gt;
  &lt;li&gt;《图解HTTP》&lt;/li&gt;
  &lt;li&gt;两本吴军老师的《大学之路》《文明之光》&lt;/li&gt;
  &lt;li&gt;《Mysql必知必会》&lt;/li&gt;
  &lt;li&gt;矮大紧的《鱼羊野史》正在进行中，我手里有1~4册，又出了5、6册，今年能不能看完得看缘分了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Git:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;把&lt;a href=&quot;https://github.com/nieweidong/my-node-pattern&quot;&gt;Node pattern&lt;/a&gt;完成&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nieweidong/fetool&quot;&gt;fetool&lt;/a&gt;，看看过年的时候能否破2000个 star&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nieweidong/local-info&quot;&gt;loc&lt;/a&gt; 继续折腾、完善&lt;/li&gt;
  &lt;li&gt;写篇 GitlabCI 或 TravisCI 小记&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;差不多就这样，over&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/2016half/&quot;&gt;2016过半&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on August 04, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Mac 软件篇]]></title>
  <link rel="alternate" type="text/html" href="/mac_soft/" />
  <id>/mac_soft</id>
  <published>2016-06-19T00:00:00+08:00</published>
  <updated>2016-06-19T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;blockquote&gt;
  &lt;p&gt;对于美好事务的追求无论何时都不算晚。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;** 文章内容来着我整理的&lt;a href=&quot;https://github.com/nieweidong/fetool&quot;&gt;fetool&lt;/a&gt;，以下内容可能更新不及时 **&lt;/p&gt;

&lt;p&gt;Mac 下的软件那么多，又是免费又是付费，应该怎么选呢？我来分享下我的推荐列表，推荐的优先级老规矩，从上往下依次降低。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.alfredapp.com/&quot;&gt;Alfred&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt;，绝对的推荐Top1，很提效率，高级版 &lt;code&gt;Powerpack&lt;/code&gt; 售价 &lt;code&gt;£17&lt;/code&gt;。除了能快速搜索和打开应用程序之外，查找文本文件、全文检索、调起浏览器搜索和计数器都是俺经常使用的功能。如果想知道具体咋用，推荐阅读老池(池建强)的文章：&lt;a href=&quot;http://www.cnblogs.com/chijianqiang/p/alfred.html&quot;&gt;《神兵利器—Alfred》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.iterm2.com/&quot;&gt;iTerm2&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt;。&lt;code&gt;Mac&lt;/code&gt; 终端功能少又不好看，&lt;code&gt;iTerm2&lt;/code&gt; 可以解救你~  推荐篇文章：&lt;a href=&quot;http://swiftcafe.io/2015/07/25/iterm/?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot;&gt;《让你的命令行丰富多彩》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bahoom.com/hyperdock/&quot;&gt;HyperDock&lt;/a&gt; - 售价 &lt;code&gt;￥68&lt;/code&gt;，感觉还是很值的(特么我还想说，&lt;code&gt;Windows&lt;/code&gt; 数年前就自带的功能，在 &lt;code&gt;Mac&lt;/code&gt; 上还收费，略忧伤)。预览和快速切换窗口太有必要了，能用快捷键控制窗口，能让拖拽到边缘的窗口自动调整大小(window早就有的功能)，真心能提高效率。推荐篇中文的文章：&lt;a href=&quot;http://www.cnblogs.com/ider/p/let-mac-window-fly-with-hyperdock.html&quot;&gt;让Mac的窗口飞&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io&quot;&gt;ATOM&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt;。2015/7 之前，在桌面环境下偶最喜欢的编辑器是 &lt;code&gt;Sublime&lt;/code&gt;，但之后就是 &lt;code&gt;ATOM&lt;/code&gt;，俺也专门为它写了篇&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/nieweidong/learn-atom&quot;&gt;使用纪要&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/surge-web-developer-tool-proxy/id1040100637&quot;&gt;Surge&lt;/a&gt; - &lt;code&gt;$99.99&lt;/code&gt;。关注 &lt;code&gt;IOS&lt;/code&gt; 开发或者常备梯子的同学，肯定都知道这大名鼎鼎的软件。价钱从 &lt;code&gt;￥68&lt;/code&gt; 涨到 &lt;code&gt;$99&lt;/code&gt; 也让偶咋舌，背后的故事就不细说了，感兴趣可自行去谷歌百度一下。PS：翻墙软件 &lt;a href=&quot;https://shadowsocks.com/&quot;&gt;小飞机ShadowsocksX&lt;/a&gt; 也非常棒，同样推荐：“轻量级科学上网姿势，改变您的生活体验！”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://1password.com/&quot;&gt;1Password&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt; 试用一个月，售价不便宜 &lt;code&gt;$64.99&lt;/code&gt;。如果觉得对各种账号的密码管理心累，那么推荐你使用，这个钱肯定值，&lt;code&gt;Mac&lt;/code&gt; 和 &lt;code&gt;iPhone&lt;/code&gt; 通用，爽歪歪。如果账号密码都是那种一、俩个套路，而且被盗也随意，那么用不用就无所谓啦&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sequelpro.com&quot;&gt;Sequel Pro&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt;。好用的Mysql工具&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://manico.im/&quot;&gt;Manico&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt; 版已经很好用了，全功能版售价 &lt;code&gt;￥25&lt;/code&gt;。快捷启动和切换 &lt;code&gt;APP&lt;/code&gt; 的工具，高效的第一步&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://manytricks.com/moom/&quot;&gt;Moom&lt;/a&gt; - 售价 &lt;strong&gt;$10&lt;/strong&gt;，有试用版。个人觉得这钱花的值，设置快捷键之后可以方便的调整每个窗口的位置。我不管在家还是公司都是开双屏，外接屏幕三分之一 &lt;code&gt;iTerm&lt;/code&gt;，三分之二 &lt;code&gt;ATOM&lt;/code&gt;，日常使用时各种全屏、居中、靠左、靠右等用快捷键来回着换，辛福感满满的。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mediaatelier.com/CheatSheet/&quot;&gt;CheatSheet&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt;。能够显示当前程序的快捷键列表，默认的快捷键是长按 ⌘&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.getmarkman.com/&quot;&gt;马克鳗&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt; 版已经够用啦，收费版是 &lt;code&gt;60/年&lt;/code&gt;。英文名 &lt;code&gt;MarkMan&lt;/code&gt;，非常强大好用的标注、测量工具，&lt;strong&gt;强烈推荐&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/browseshot/id615916400&quot;&gt;BrowseShot&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt;。偶正在使用的网页截图工具，强烈推荐&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt;。说实话，&lt;code&gt;Mac&lt;/code&gt; 下木有 &lt;code&gt;Fiddler&lt;/code&gt; 挺不习惯，不过在有更强大的替代品，虽然有点复杂…还好后来下载到便宜(&lt;code&gt;￥68&lt;/code&gt;)的 &lt;code&gt;Surge&lt;/code&gt; 做替代品&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cockos.com/licecap/&quot;&gt;LICEcap&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt;。屏幕录制工具，支持导出 GIF 动画图片格式 轻量级、使用简单，录制过程中可以改变录屏范围&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.macbartender.com/&quot;&gt;Bartender 2&lt;/a&gt; - 售价 &lt;code&gt;$20.97&lt;/code&gt;，但是可 &lt;strong&gt;免费&lt;/strong&gt; 试用四周。Mac右上角菜单的管理工具，试用之后右上角的菜单瞬间清爽了，反正试用下也不花钱:)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.scootersoftware.com&quot;&gt;BeyondCompare&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt;。在Windows下就开始用了 比对文件和文件夹杠杠好使，Merge必备工具&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sourcetreeapp.com/&quot;&gt;SourceTree&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt;。属于大名鼎鼎的 &lt;code&gt;Atlassian&lt;/code&gt;，一款好用的的 &lt;code&gt;Git&lt;/code&gt; 客户端工具，重点是 &lt;strong&gt;支持中文&lt;/strong&gt;，哈哈:)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.focusboosterapp.com/&quot;&gt;focus booster&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt; 已经够用，当然还有更高级的 &lt;code&gt;INDIVIDUAL/PROFESSIONAL&lt;/code&gt;，售价分别是 &lt;code&gt;$3/$5&lt;/code&gt;。因为比较在意时间管理，所以当工作压力较大时，这软件是俺的必备之物&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://webtorrent.io/&quot;&gt;WebTorrent&lt;/a&gt; - &lt;strong&gt;免费&lt;/strong&gt;。直接播放种子，你懂得。年轻的斯坦福大神 &lt;a href=&quot;http://feross.org/&quot;&gt;Feross&lt;/a&gt; 开发，Git上的开源项目哦。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt; - &lt;strong&gt;$129&lt;/strong&gt;，可试用一个月。功能超强的前端 &lt;code&gt;IDE&lt;/code&gt;，谁用谁知道 PS：貌似俺插件装多了，用着卡卡的，风扇呼呼转…然后俺就卸载装了，装了 &lt;code&gt;ATOM&lt;/code&gt;…&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mindnode.com/&quot;&gt;MindNode&lt;/a&gt; - 售价 &lt;strong&gt;$29.99&lt;/strong&gt;，有免费试用版。这是款漂亮的思维导图工具。其实 &lt;a href=&quot;http://naotu.baidu.com/&quot;&gt;百度脑图&lt;/a&gt; 这类 Web 上的工具绝对够用了，不太推荐…&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://25.io/mou/&quot;&gt;Mou&lt;/a&gt; - 我曾使用过的 Markdown 编辑器，不推荐使用。原本已经准备去掉，但是偶还是想让大家了解下这个有意思的事情：&lt;a href=&quot;http://matrix.sspai.com/p/c7a3c9c0&quot;&gt;《一年了，那个闻名遐迩的 Mou 你还记得吗？》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上列出来的都是偶觉得比较有意思、有特点的软件。当然，也有三类我没有列出来的，分别是 太大众、太小众、太不合适 T.T&lt;/p&gt;

&lt;p&gt;类似 &lt;code&gt;Docker&lt;/code&gt;、&lt;code&gt;Polarr(泼辣修图)&lt;/code&gt; 等这类都太过小众；
比如 &lt;code&gt;有道翻译&lt;/code&gt;、&lt;code&gt;Evernote&lt;/code&gt;、&lt;code&gt;Foxmail&lt;/code&gt; 等这类又太大众；
然后，有些软件买了觉得有点“亏”，比如刚出手买入的 &lt;code&gt;Final Cut Pro&lt;/code&gt;，其实机器自带的 &lt;code&gt;iMovie&lt;/code&gt; 就挺好了（完美诠释《Final从入手到放弃》）。
所以，这几类就不一一往这列举啦~&lt;/p&gt;

&lt;p&gt;over:)&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/mac_soft/&quot;&gt;Mac 软件篇&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on June 19, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Chrome插件整理]]></title>
  <link rel="alternate" type="text/html" href="/chrome_plugins/" />
  <id>/chrome_plugins</id>
  <published>2016-06-06T00:00:00+08:00</published>
  <updated>2016-06-06T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;本文内容都来源于偶整理的&lt;a href=&quot;https://github.com/nieweidong/fetool#BrowserPlugins&quot;&gt;fetool&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;想让更多使用Chrome的小伙伴，体验到这些令人愉悦的小工具，所以单独整理了这篇文章。&lt;/p&gt;

&lt;p&gt;如果你是 &lt;strong&gt;前端/服务端/设计/面向&lt;code&gt;Github&lt;/code&gt;编程/视觉控&lt;/strong&gt;，相信下列的插件有不少你会用到，期待你能喜欢:)&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Chrome&lt;/code&gt; 应用商店必定是需要翻墙的哈。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以下插件都是俺多年积累淘出来的，数量不多，所以就不区分 &lt;code&gt;Github&lt;/code&gt; 插件和非 &lt;code&gt;Github&lt;/code&gt; 插件了。按照俺推荐的强度自上向下展示，且大多数插件就是偶工作和生活必备，希望能对大家有用。后续如有新发现好插件，偶也会及时更新哒。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop&quot;&gt;Postman&lt;/a&gt; - &lt;code&gt;POST&lt;/code&gt; 接口调试终结者，异常强大的接口调试工具。稍稍有一点学习成本，推荐之&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc&quot;&gt;JSONView&lt;/a&gt; - 就是个 &lt;code&gt;JSON&lt;/code&gt; 格式的查看工具，可以很方便的展示数据，麻麻再也不用担心偶调试接口啦。PS：同类插件有不少，所以用的开心就行&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/pflgjjogbmmcmfhfcnlohagkablhbpmg&quot;&gt;二维码生成器&lt;/a&gt; - RT。PS：这FF早已经自带生成二维码工具了，&lt;code&gt;Chrome&lt;/code&gt; 还得装插件才行，任性…&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad&quot;&gt;WEB前端助手(FeHelper)&lt;/a&gt; &lt;a href=&quot;https://www.baidufe.com/&quot;&gt;百度FE&lt;/a&gt;出品，功能超全的 Chrome 插件。简单列一下其功能：QR码生成器、字符串编解码工具、JSON格式化查看器、前端编码规范检测、代码压缩工具、页面取色工具、统计并分析网页加载性能等等&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/eye-dropper/hmdcmlfkchdmnmnmheododdhjedfccka&quot;&gt;Eye Dropper&lt;/a&gt; 前端必备的颜色提取神器，操作简单容易上手&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb&quot;&gt;Vimium&lt;/a&gt; 和 &lt;code&gt;Vim&lt;/code&gt; 快捷键一样，浏览网站时不需要鼠标咯&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/page-ruler/jlpkojjdgbllmedoapgfodplfhcbnbpn&quot;&gt;Page Ruler&lt;/a&gt; 前端必备的尺子。计算页面元素间距、位置等信息的时候，你就知道它的好了，无脑上手，你值得拥有&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/capture-webpage-screensho/mcbpblocgmgfnpjjppndjkmgjaogfceg&quot;&gt;FireShot&lt;/a&gt; 可以截取整个网页、部分页面，然后支持导出为各种格式。俺微博上发的网页全景图都是靠这个插件截取的&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg&quot;&gt;Infinity&lt;/a&gt; - 好不好用有点见仁见智了，但是我个人比较喜欢。使用后会让你的 &lt;strong&gt;新标签页&lt;/strong&gt; 耳目一新，有漂亮的背景和各种常用的功能，比如地图、天气、&lt;code&gt;Gmail&lt;/code&gt;、&lt;code&gt;Chrome&lt;/code&gt;商店等等。当然，在这个插件的设置中还可以设置壁纸、动画效果等等&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca&quot;&gt;Momentum&lt;/a&gt; 同样也是 &lt;strong&gt;新标签页&lt;/strong&gt; 的插件，但是不管是视觉上(高清大图)还是功能上，都比 &lt;a href=&quot;https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg&quot;&gt;Infinity&lt;/a&gt; 高大上不少，&lt;code&gt;Setting&lt;/code&gt; 里面有不少设置和快捷键，都很好上手的。&lt;a href=&quot;https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg&quot;&gt;Infinity&lt;/a&gt;胜在中文和直观，&lt;a href=&quot;https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca&quot;&gt;Momentum&lt;/a&gt;胜在视觉冲击。俺基本上这俩款看心情换着用，所以希望你也都能喜欢:)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc&quot;&gt;Octotree&lt;/a&gt; - 在浏览器左侧展示 &lt;code&gt;Github&lt;/code&gt; 项目的文件导航，使目录结构一目了然，而且我们国内 &lt;code&gt;Github&lt;/code&gt; 的访问速度又不稳定，用这个工具也就很提效率了。对经常使用 &lt;code&gt;Github&lt;/code&gt; 的同学强烈推荐&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/builtwith-technology-prof/dapjbgnjinbpoindlpdmhochffioedbn&quot;&gt;BuiltWith&lt;/a&gt; / &lt;a href=&quot;https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg&quot;&gt;wappalyzer&lt;/a&gt; / &lt;a href=&quot;https://chrome.google.com/webstore/detail/chrome-sniffer-plus/fhhdlnnepfjhlhilgmeepgkhjmhhhjkh&quot;&gt;Chrome Sniffer Plus&lt;/a&gt; - 几款超强的网站分析工具，可以给出网站非常多的技术栈信息。大到 &lt;code&gt;Web Servers&lt;/code&gt;、服务端的 &lt;code&gt;Frameworks&lt;/code&gt; 或 &lt;code&gt;JS&lt;/code&gt; 框架，小到 &lt;code&gt;meta&lt;/code&gt;、编码格式甚至 &lt;code&gt;Analytics&lt;/code&gt;，非常推荐&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb/related&quot;&gt;Adblock Plus&lt;/a&gt; 非常非常有名的免费的过滤广告的插件。PS：广告屏蔽这个见仁见智，其实俺个人还是比较接受一些个性化推荐的广告&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/wide-github/kaalofacklcidaampbokdplbklpeldpj/related&quot;&gt;Wide Github&lt;/a&gt; 无聊又实用的 &lt;code&gt;Github&lt;/code&gt; 插件。无聊是因为这个插件就特么一个功能，&lt;strong&gt;加宽&lt;/strong&gt;，能让 &lt;code&gt;Github&lt;/code&gt; 页面变宽，每行展示更多的内容，尤其配合着&lt;a href=&quot;https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc&quot;&gt;Octotree&lt;/a&gt;，展示效果极佳。非常推荐 &lt;code&gt;Mac&lt;/code&gt; 用户实用，因为屏幕比较不大，变宽后阅读感觉更好&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/devtools-author/egfhcfdfnajldliefpdoaojgahefjhhi&quot;&gt;DevTools Author&lt;/a&gt; 纯装逼的插件，可以选择你的 &lt;code&gt;Chrome&lt;/code&gt; 开发者工具的主题，且支持的主题超过25种，视觉装逼控必备。设置分大概三步，官网有文字说明，&lt;code&gt;youtube&lt;/code&gt; 上的视频教程奉上(Customization With DevTools Author)[https://www.youtube.com/watch?v=AUZagMLMAJc]&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/porter-plug/lngoojfoglemfpbeiomhgheccpdheilp&quot;&gt;GitPlug&lt;/a&gt; - 在 &lt;code&gt;Github&lt;/code&gt; 项目页中嵌入有关的图表信息，直观的展示当前项目的 &lt;code&gt;Star Trend&lt;/code&gt;，能方便看到当前这个开源项目的发起时间，火爆趋势；对比较知名的项目还有相关的 &lt;code&gt;News&lt;/code&gt; 展示&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/octolinker/jlmafbaeoofdegohdhinkhilhclaklkp&quot;&gt;OctoLinker&lt;/a&gt; - 在 &lt;code&gt;package.json&lt;/code&gt; 或任意 &lt;code&gt;.js&lt;/code&gt; 文件中，可以方便的对 &lt;code&gt;require()&lt;/code&gt; 的 &lt;code&gt;package&lt;/code&gt; 进去点击，跳转去对应的 &lt;code&gt;Github&lt;/code&gt; 页面。PS：特么不太好表达，建议你去这个插件的概述页，里面有个十来秒的视频，看完就明白鸟&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;补充：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;翻墙代理的插件偶没使用，偶手机和电脑的翻墙都是配的 &lt;code&gt;Surge&lt;/code&gt; 无脑搞定，不过翻墙代理插件推荐&lt;a href=&quot;https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm&quot;&gt;Proxy SwitchySharp&lt;/a&gt;，熊掌公司里大多用的都是它&lt;/li&gt;
  &lt;li&gt;日常开发相关的插件就以上这些，还有几款如知乎的插件、购物插件等这类与开发效率不沾边的，俺就不这上头列了哈&lt;/li&gt;
&lt;/ol&gt;

    &lt;p&gt;&lt;a href=&quot;/chrome_plugins/&quot;&gt;Chrome插件整理&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on June 06, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Gulp使用小结(下)]]></title>
  <link rel="alternate" type="text/html" href="/gulp_2/" />
  <id>/gulp_2</id>
  <published>2016-06-05T00:00:00+08:00</published>
  <updated>2016-06-05T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;接上篇文章接&lt;a href=&quot;http://www.fefork.com/gulp_1/&quot;&gt;Gulp使用小结(上)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;内容如下：&lt;/p&gt;

&lt;p&gt;首先，偶在&lt;a href=&quot;https://github.com/nieweidong/gulp-demos&quot;&gt;gulp-demos&lt;/a&gt;上已经提交了个较通用的栗子…俺琢磨半天，原准备分阶段搞些 &lt;code&gt;Gulp&lt;/code&gt; 套路，但是写完介个栗子之后，觉得已经能覆盖绝大多数的场景了(懵逼脸.gif)。算哒，当偶偷懒就酱吧，一个套路打天下:)&lt;/p&gt;

&lt;p&gt;然后，聊聊这篇值得思考的文章《我为何放弃Gulp与Grunt，转投npm scripts》
&lt;a href=&quot;http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part1&quot;&gt;上&lt;/a&gt;
&lt;a href=&quot;http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part2&quot;&gt;中&lt;/a&gt;
&lt;a href=&quot;http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part3&quot;&gt;下&lt;/a&gt;，
英文原地址奉上：&lt;a href=&quot;https://medium.freecodecamp.com/why-i-left-gulp-and-grunt-for-npm-scripts-3d6853dd22b8&quot;&gt;《Why I Left Gulp and Grunt for npm Scripts》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最后，偶来分几个维度扯一下这些构建方式的优劣，尤其是对于 &lt;code&gt;npm scripts&lt;/code&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;目录&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#skim&quot;&gt;《npm scripts》概要&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#brief&quot;&gt;《npm scripts》观感简聊&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#compare&quot;&gt;优劣一览&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#efficient&quot;&gt;执行效率&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#stuty&quot;&gt;学习成本&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#profit&quot;&gt;个人收益&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#human&quot;&gt;多人 VS 单干&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclude&quot;&gt;小结&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#node&quot;&gt;不美好的Node&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;skim&quot;&gt;《npm scripts》概要&lt;/h2&gt;

&lt;p&gt;这篇文章在 &lt;code&gt;InfoQ&lt;/code&gt; 上被分成了三篇，字数其实不多，且如果您对 &lt;code&gt;npm scripts&lt;/code&gt; 不了解，很推荐各位去看看，构建的玩法完全不一样。基本内容如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一篇分析 &lt;code&gt;Gulp&lt;/code&gt; 和 &lt;code&gt;Grunt&lt;/code&gt; 的劣势。作者忍痛表示各种忍不鸟，主要集中在以下三点：
    &lt;ul&gt;
      &lt;li&gt;问题1 - 对插件作者的依赖&lt;/li&gt;
      &lt;li&gt;问题2 - 令人沮丧的调试&lt;/li&gt;
      &lt;li&gt;问题3 - 脱节的文档&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第二篇描述 &lt;code&gt;npm scripts&lt;/code&gt; 的洪荒之力被低估啦。其实 &lt;code&gt;npm scripts&lt;/code&gt; 是如何强大和好理解，作者罗列了四点 &lt;code&gt;Gulp&lt;/code&gt; 与 &lt;code&gt;Grunt&lt;/code&gt; 如此流行的原因：
    &lt;ul&gt;
      &lt;li&gt;误解1 - 使用npm scripts需要强大的命令行技巧&lt;/li&gt;
      &lt;li&gt;误解2 - npm scripts不够强大&lt;/li&gt;
      &lt;li&gt;误解3 - Gulp的流对于快速构建来说是不可或缺的&lt;/li&gt;
      &lt;li&gt;误解4 - npm scripts无法实现跨平台运行&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第三篇吐苦水，作者揭示自己在使用 &lt;code&gt;npm scripts&lt;/code&gt; 过程中遇到的痛点和解决之道。 &lt;strong&gt;痛点：JSON规范并不支持注释，因此无法在package.json中添加注释。&lt;/strong&gt; 解决办法如下：
    &lt;ul&gt;
      &lt;li&gt;编写小巧、命名良好、单一目的的脚本&lt;/li&gt;
      &lt;li&gt;分离文档与脚本（比如说放在README.md中）&lt;/li&gt;
      &lt;li&gt;调用单独的.js文件&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;阅读这篇文章引起偶很多共鸣，因为工作中处理的事务较琐碎(专业打杂)，所以俺对各种技术木有啥倾向性，神马好用就用神马，正好 &lt;code&gt;npm scripts&lt;/code&gt; 、&lt;code&gt;Gulp&lt;/code&gt;、&lt;code&gt;Grunt&lt;/code&gt; 都是俺使用过或正在使用的方案，那么接下来简单聊聊下偶的观点。&lt;/p&gt;

&lt;h2 id=&quot;brief&quot;&gt;《npm scripts》观感简聊&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;重点强调一下 —— &lt;strong&gt;“存在即合理”&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不管何种技术方案，存在都有其客观原因（如历史原因、编码习惯、虚拟机、分布式、语法糖、编程范型、语言模型等等，要想“编原因”能说的多了去了，劳资越编越高大上有木有），所以建议（更期待）大家以更高的视角去看待这种“某某技术方案更好”的问题，&lt;strong&gt;适合项目、适合团队&lt;/strong&gt; 才是最重要的。&lt;/p&gt;

&lt;p&gt;偶们先看第一篇文章，主要是分析 &lt;code&gt;Gulp&lt;/code&gt; 和 &lt;code&gt;Grunt&lt;/code&gt; 的劣势。如果你对 &lt;code&gt;Node&lt;/code&gt; 有了解，那么你会发现，作者虽然在吐槽 &lt;code&gt;Gulp/Grunt&lt;/code&gt;，但是，其实这些问题都是 &lt;code&gt;Node&lt;/code&gt; 正在努力想解决的问题。再俺看来，其实这也可以折射整个 &lt;code&gt;Node&lt;/code&gt; 生态略混乱和不标准带来的影响。&lt;/p&gt;

&lt;p&gt;但我们 &lt;code&gt;npm scripts&lt;/code&gt; 就可以不用面对这些问题鸟？答：可以少面对，因为至少不用去学习 &lt;code&gt;Gulp&lt;/code&gt; 和 &lt;code&gt;Grunt&lt;/code&gt; 相关的包，其中很多文档确实令人着急；但根本问题还是一样嘛，一样会遇到 包依赖、调试难、文档差 的问题&lt;/p&gt;

&lt;p&gt;必须得承认 &lt;code&gt;npm scripts&lt;/code&gt; 的强大和灵活，它不仅提供了基于约定的&lt;a href=&quot;https://docs.npmjs.com/misc/scripts#description&quot;&gt;pre与post钩子&lt;/a&gt;（PS：钩子是我眼中 &lt;code&gt;npm scripts&lt;/code&gt; 最炫酷的能力），可以使用 &lt;code&gt;Node&lt;/code&gt; 生态的一切，更可以使用其他的 &lt;code&gt;Python、PHP、bash&lt;/code&gt; 等脚本，给予开发者有更大的施展空间。&lt;/p&gt;

&lt;p&gt;下来让我们通过 执行效率、学习成本、收益 等维度，看看这三种方案的优劣，最终取舍问题就交给各位啦，反正我所在的团队啥都用:)&lt;/p&gt;

&lt;p&gt;再分享几篇学习 &lt;code&gt;npm scripts&lt;/code&gt; 的文章，看完之后你会发现，用其替换 &lt;code&gt;Grunt&lt;/code&gt; 和 &lt;code&gt;Gulp&lt;/code&gt; 没那么简单，但绝不是太麻烦的事情：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/&quot;&gt;How to Use npm as a Build Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chocoluffy.com/2016/05/15/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%BA%93-%E7%AC%AC%E4%B8%80%E6%9C%9F-npm-script/?utm_source=tuicool&amp;amp;utm_medium=referral&quot;&gt;前端工具-npm script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;compare&quot;&gt;优劣一览&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;背景一：按俺这种屌丝的眼光看，&lt;a href=&quot;https://medium.freecodecamp.com/why-i-left-gulp-and-grunt-for-npm-scripts-3d6853dd22b8&quot;&gt;《Why I Left Gulp and Grunt for npm Scripts》&lt;/a&gt; 的作者 Cory House 是个老外，虽然目前国内前端开发者牛人辈出，与美帝差距不大，但整体水平还是略不如的。其实吧，我想说的是：国内的前端普遍对 &lt;code&gt;bash&lt;/code&gt;，&lt;code&gt;Node&lt;/code&gt; 不熟悉。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;背景二：“胜过”旧工具的新工具似乎不停的在问世，不经意间就会蹦出个“闪闪亮的”技术来替代另一个，在前端界尤其是这样。这着实让其他语言的开发者惊呆了，因为“前端”这个方向已经火爆了那么久，但是看情况短期内不会消停，各种洪荒之力还在不停的喷涌，景象喜人。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;结合这俩个大背景，让偶们用平和的心态来瞅瞅这俩类(&lt;code&gt;Gulp/Grunt&lt;/code&gt; 算一类，&lt;code&gt;npm scripts&lt;/code&gt; 算一类)构建工具的优劣吧。&lt;/p&gt;

&lt;h3 id=&quot;efficient&quot;&gt;执行效率&lt;/h3&gt;

&lt;p&gt;效率问题好理解。
- &lt;code&gt;Grunt&lt;/code&gt; 年龄比 &lt;code&gt;Gulp&lt;/code&gt;稍长，在 &lt;code&gt;Github&lt;/code&gt; 第一次提交时间是&lt;a href=&quot;https://github.com/gruntjs/grunt/graphs/contributors&quot;&gt;2011/09/18&lt;/a&gt;)；&lt;code&gt;v0.4.0&lt;/code&gt; 这个版本开始(2013年2月)，&lt;code&gt;Grunt&lt;/code&gt; 开始横扫前端圈
- &lt;code&gt;Gulp&lt;/code&gt; 在 &lt;code&gt;Github&lt;/code&gt; 第一次提交时间是&lt;a href=&quot;https://github.com/gulpjs/gulp/graphs/contributors&quot;&gt;2013/06/30&lt;/a&gt;，俺是2014/08 第一次使用，那时中文文档不多，插件也不多&lt;/p&gt;

&lt;p&gt;基于“背景二”，“新”工具的产生必然是想革了“旧”工具的命，而且 &lt;code&gt;Gulp&lt;/code&gt; 也做到了(尤其在编译效率方面)。由于 &lt;code&gt;Grunt&lt;/code&gt; 的编译过程大量依赖对文件的 &lt;code&gt;I/O&lt;/code&gt; 操作，所以 &lt;code&gt;Grunt&lt;/code&gt; 编译效率远不如基于 &lt;code&gt;stream&lt;/code&gt; 的 &lt;code&gt;Gulp&lt;/code&gt; 和 &lt;code&gt;npm scripts&lt;/code&gt;；且 &lt;code&gt;Gulp&lt;/code&gt; 通过管道(&lt;code&gt;pipe&lt;/code&gt;)把各个任务(&lt;code&gt;task&lt;/code&gt;)的 输入/输出 串起来，让整个编译过程更容易理解和维护。&lt;/p&gt;

&lt;p&gt;再看 &lt;code&gt;Gulp&lt;/code&gt; 和 &lt;code&gt;npm scripts&lt;/code&gt;，如果是基于 &lt;code&gt;Node&lt;/code&gt; 生态，那么理论上执行效率半斤八两，完全依赖对应 &lt;code&gt;Package&lt;/code&gt; 的洪荒之力；如果不基于 &lt;code&gt;Node&lt;/code&gt; 生态，那么比起来就木有太多意义啦，全凭工程师的脑洞和能力。&lt;/p&gt;

&lt;h3 id=&quot;stuty&quot;&gt;学习成本&lt;/h3&gt;

&lt;p&gt;首先，&lt;code&gt;Grunt&lt;/code&gt; 和 &lt;code&gt;Gulp&lt;/code&gt; 都足够好上手，不需要多先进的理念和经验，就可以用这俩样工具构建简单的前端项目。但是，&lt;code&gt;Gulp&lt;/code&gt; 甚至只有几个 API，这真心够易学的。&lt;/p&gt;

&lt;p&gt;偶上一篇&lt;a href=&quot;http://www.fefork.com/gulp_1/&quot;&gt;《上》&lt;/a&gt;文章说过：“个人觉得玩 &lt;code&gt;Grunt&lt;/code&gt; 是种写配置的感觉；玩&lt;code&gt;Gulp&lt;/code&gt;就是写脚本(task)”。&lt;/p&gt;

&lt;p&gt;但是对于 &lt;code&gt;npm scripts&lt;/code&gt; 来说，学习成本比上面俩种高了几何倍。时间有限，有关更多的 &lt;code&gt;npm scripts&lt;/code&gt; 俺就不多啰嗦啦，下面偶简单罗列下其特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;得熟悉 &lt;code&gt;Node&lt;/code&gt;，还有相关的 &lt;code&gt;package.json&lt;/code&gt;、&lt;code&gt;npm&lt;/code&gt; 等之类。PS：&lt;code&gt;Grunt&lt;/code&gt; 和 &lt;code&gt;Gulp&lt;/code&gt; 都是前端的范畴，会不会 &lt;code&gt;Node&lt;/code&gt; 无伤大雅&lt;/li&gt;
  &lt;li&gt;但凡想稍深入一点，就有必要去了解 &lt;code&gt;bash&lt;/code&gt;。&lt;strong&gt;PS：亲，&lt;code&gt;npm scripts&lt;/code&gt; 可不是 &lt;code&gt;CLI&lt;/code&gt; 工具，学会写 &lt;code&gt;Node&lt;/code&gt; 脚本才仅仅是开始呢&lt;/strong&gt;:)&lt;/li&gt;
  &lt;li&gt;了解跨平台知识~&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不要被”学习成本”阻挡，接下来偶来说说收益吧。技术的积累肯定都是有用的嘛，比如用来：装逼…&lt;/p&gt;

&lt;h3 id=&quot;profit&quot;&gt;个人收益&lt;/h3&gt;

&lt;p&gt;收益问题就比较现实了。花了时间去学去研究，光收获成就感可不行，实际收益也要能体现才好是吧，所以嘛…让我们干了这碗鸡汤。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-delphi&quot; data-lang=&quot;delphi&quot;&gt;&lt;span class=&quot;err&quot;&gt;少年苦练&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;年拳术欲下山扬名立万，路遇一使刀汉子，数招后不敌惨败而归……回山后找师傅问话&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;“师傅，为何我苦练十年还会输？”&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;“因为你不知道打架不止可以用拳头。”&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;“可你也没告诉我啊！”&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;“你只说要学拳法，又没说学打架！”&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;“那我不学拳法了，我要学打架！”&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;“那就不只是要学拳法了，打架想要赢就得十八般武艺都学，你未必要门门精通，但你最起码得有这些见识。除此之外，还得学挨打，学疗伤，学逃跑，学追踪，学暗器，学使毒……想赢？哪有那么简单的！”&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;“那我还能成拳法宗师吗？”&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;“呵呵，如果你打架再也不会输，谁敢说你不是宗师？”&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;来源：&lt;a href=&quot;https://segmentfault.com/q/1010000003732995&quot;&gt;《JavaScript怎样才算学好？》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;梦想总是要有的，万一遇见了鬼呢…&lt;/p&gt;

&lt;p&gt;不对不对，万一哪天偶们成为了宗师呢，对吧~&lt;/p&gt;

&lt;h3 id=&quot;human&quot;&gt;多人 VS 单干&lt;/h3&gt;

&lt;p&gt;我们再看个更现实的问题 —— 多人开发/独立开发。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;单干&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;技术瓶颈就是自己&lt;/li&gt;
  &lt;li&gt;开发和部署的环境较随意，反正坑的是自己。PS：各种配环境真的是大团队里的恶魔&lt;/li&gt;
  &lt;li&gt;文档那都不叫问题，肯写几句代码注释给自己和后来人看，这就已经够意思了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;多人&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何统一技术栈？人人都会 &lt;code&gt;Node&lt;/code&gt; 比较难，人人都懂 &lt;code&gt;shell&lt;/code&gt; 就更难了，但是人人都能玩转 &lt;code&gt;Gulp&lt;/code&gt; 就简单的多了，只要懂 &lt;code&gt;JavaScript&lt;/code&gt; 就行鸟&lt;/li&gt;
  &lt;li&gt;开发环境和生成环境得严谨起来啦，而且但凡要考虑跨平台，&lt;code&gt;npm scripts&lt;/code&gt; 强大的洪荒之力会被压制，而且真要对面这个问题，光屡文档就得忙一阵&lt;/li&gt;
  &lt;li&gt;请记住，文档是项目和团队的传承…哦对了，&lt;code&gt;package.json&lt;/code&gt; 是 &lt;code&gt;JSON&lt;/code&gt; 格式，不支持写注释哦…我想骂脏话：#&amp;amp;！#@#@&lt;em&gt;#！@#（#&lt;/em&gt;#￥&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;所以，老夫的建议是：请使用 &lt;strong&gt;适合&lt;/strong&gt; 的技术。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 class=&quot;conclude&quot;&gt;小结&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;当前 3.9.1 版本的 &lt;code&gt;Gulp API&lt;/code&gt; 确实足够简单易懂，但 4.0 版本新增了数个 &lt;code&gt;API&lt;/code&gt;。有关新 &lt;code&gt;API&lt;/code&gt; 的内容就不说明鸟，Changelog地址：&lt;a href=&quot;https://github.com/gulpjs/gulp/blob/4.0/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是！特么去年劳资就等着这个 4.0，现在已经2016年的6月了，这个 4.0 还特么没有出来…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Grunt&lt;/code&gt; 的优势是插件够齐全，开发中需要的插件都能找到，且足够易学好上手；缺点是可读性差强人意，编译效率略低，项目越大劣势会越明显。PS：插件数5734(2016/06/01记录)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Gulp&lt;/code&gt; 作为 &lt;code&gt;Grunt&lt;/code&gt; 的颠覆者，确实更简单、更好上手，&lt;code&gt;stream&lt;/code&gt; 的特点也更符合技术趋势，而且编译的效率更优；不过插件数相对 &lt;code&gt;Grunt&lt;/code&gt; 略少。PS：插件数2432(2016/06/01记录)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多有关 &lt;code&gt;Grunt 对比 Gulp&lt;/code&gt;，推荐阅读：&lt;a href=&quot;http://www.benben.cc/blog/?p=407&quot;&gt;Gulp vs Grunt&lt;/a&gt; PS：这文章貌似我多次推荐，但俺真没收好处费:)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;学习成本较高可能是 &lt;code&gt;npm scripts&lt;/code&gt; 最大的问题了；其次就是跨平台会比较麻烦。&lt;/p&gt;

&lt;p&gt;其实我觉得使用 &lt;code&gt;npm scripts&lt;/code&gt; 最大的好处就是没有“束缚”！！！&lt;/p&gt;

&lt;p&gt;不管上面两种方案做到了如何美好和抽象，其实都是 &lt;code&gt;Node&lt;/code&gt; 能力的具体落地，所有的一切都背靠整个 &lt;code&gt;Node&lt;/code&gt; 生态完成（PS：当然，偶们得肯定 &lt;code&gt;Gulp&lt;/code&gt; 和 &lt;code&gt;Grunt&lt;/code&gt; 的价值与意义）。&lt;/p&gt;

&lt;p&gt;但如果到了 &lt;code&gt;npm scripts&lt;/code&gt;，您等于拥有了操作系统的一切。&lt;code&gt;npm scripts&lt;/code&gt; 可以执行 &lt;code&gt;shell&lt;/code&gt;，&lt;code&gt;shell&lt;/code&gt; 里可以是 &lt;code&gt;Node&lt;/code&gt; 程序，甚至是 &lt;code&gt;PHP、Ruby、bash&lt;/code&gt; 等等能执行的一切，能玩出什么花样就看自己的脑洞有多大了:)&lt;/p&gt;

&lt;p&gt;比如在我司，部署/回滚 上线环境和测试环境，测试用例，后门调试等，都是用 &lt;code&gt;npm scripts&lt;/code&gt; 几行代码搞定。&lt;/p&gt;

&lt;h3 id=&quot;node&quot;&gt;不美好的Node&lt;/h3&gt;

&lt;p&gt;最后，因为想说说 &lt;strong&gt;包依赖&lt;/strong&gt; 这个事情，所以在这容我多聊五毛钱的 &lt;code&gt;Node&lt;/code&gt;，火热无比的它确实不是那么美好(PS：当然不会存在完美的语言嘛)。&lt;/p&gt;

&lt;p&gt;经过了 &lt;code&gt;JavaScript&lt;/code&gt; 和本身版本号的野蛮生长，略混乱的生态也让不少开发者吃到了苦头。说俩事情：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;善变的标准&lt;/strong&gt; &lt;code&gt;ES5&lt;/code&gt; 还是 &lt;code&gt;ES2015(就是ES6)&lt;/code&gt;？如果你还不知道指针函数、模板字符串、Set/Map数据结构等等，真心看不懂现在新兴的前端项目。又怎么去解决 &lt;code&gt;callback&lt;/code&gt;？是 &lt;code&gt;Promise、Async、Generator&lt;/code&gt; 还是其他…如果你不去追最新的标准，分分钟就被现在的年轻人吊打呀:)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;包依赖&lt;/strong&gt; 数月前 &lt;code&gt;left-pad&lt;/code&gt; 事件(一个名字引发的血案，感兴趣的同学请自行搜索)，硬是搞得 &lt;code&gt;NPM&lt;/code&gt; 升级了移除包的规则。升级内容的中文版奉上：&lt;a href=&quot;http://www.infoq.com/cn/news/2016/04/npm-package-removal-policy&quot;&gt;Npm更新移除包的规&lt;/a&gt;。这一段几次写了删、删了写，吐槽和抱怨不适合我这种阳光 boy。。。算了，都删掉~~贴张国外很火的图片来让大家开心一下吧：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;300&quot; src=&quot;https://raw.githubusercontent.com/nieweidong/nieweidong.github.io/master/images/needless.jpg&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;因为这些构建工具，前端有了自动持续化的构建过程，越来越多美好的事务正在发生…&lt;/p&gt;

&lt;p&gt;有关 &lt;code&gt;Gulp&lt;/code&gt; 就说到这吧。我水完了，谢谢:)&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/gulp_2/&quot;&gt;Gulp使用小结(下)&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on June 05, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[如果我去创业]]></title>
  <link rel="alternate" type="text/html" href="/startup/" />
  <id>/startup</id>
  <published>2016-05-15T00:00:00+08:00</published>
  <updated>2016-05-15T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;blockquote&gt;
  &lt;p&gt;细细回想起来，我觉得我自己应该算那种没心没肺的呆萌型，结婚之前心智特像小孩(虽然现在也不咋成熟)，没啥想法，晚上睡眠质量杠杠好(囧)。神马诗和远方，劳资只有眼前的苟且…
所以在这，看官您看不到类似那少年成名的科技明星那样：年少时就意气风发、目标明确，更是收获满满，看着就能量(鸡血)爆棚！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;貌似偶第一次有“创业”这个想法已是25岁“高龄”(别特么说那时我还年轻，但劳资身边是个人就天天咋呼说要做点啥做点啥，虽然最后大多做了微商被我屏蔽)了，那时正和云姐(现在家中的领导)恋爱，因为云姐在家待着无聊跑去学花艺，计划将来开个花店做个女老板，所以促使偶萌生了Startup的想法，原因是：&lt;strong&gt;领导开心，家庭和谐&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你对上面八个加黑的字不理解，那么…骚年，说明你还没结婚哈:)&lt;/p&gt;

&lt;p&gt;水够了，开始正文。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;声明：不要问偶为嘛有这些想法，论点没有非黑即白，这些想法都与俺个人性格和经历有关。&lt;/h2&gt;

&lt;p&gt;写这篇文章不是说劳资有创业的计划了，而是俺通过自己这几年的工作，总结了一下如果去创业，我有哪些 &lt;strong&gt;期待的&lt;/strong&gt; 和 &lt;strong&gt;忍不鸟的&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;至于真的将来做神马还偶完全没想好，但是俺已经深刻的明白自己能做什么了 —— 安心做码农。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;先说说我认为最重要的俩点&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;小 =&amp;gt; 人多不一定是好事&lt;/li&gt;
  &lt;li&gt;美 =&amp;gt; 方向上有创意和价值&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;别和我说“如果哪天人多了呢”或者“多小算小呢”。 假如、也许、可能、如果…真特么有那么一天，劳资也可以去学习&lt;code&gt;Sergey Brin&lt;/code&gt;，自己搞自己喜欢的就好&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;人&lt;/h4&gt;

&lt;p&gt;团队精简，有执行力&lt;/p&gt;

&lt;p&gt;剥削归剥削，但是 &lt;strong&gt;工资一定给够&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;文凭是招聘的基础(无绝对，当然还是得能力至上)&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;钱&lt;/h4&gt;

&lt;p&gt;不喜野蛮生长，少拿外面的钱&lt;/p&gt;

&lt;p&gt;懂得 &lt;strong&gt;分享&lt;/strong&gt; 公司的成长&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;制度&lt;/h4&gt;

&lt;p&gt;办公室抽烟的打死&lt;/p&gt;

&lt;p&gt;恋爱自由，不反对员工恋爱&lt;/p&gt;

&lt;p&gt;配套福利得给够 =&amp;gt; 对于女员工孕期的问题，得有福利保障。掐指一算，看来劳资不太适合当资本家&lt;/p&gt;

&lt;p&gt;可以适当带宠物来公司 =&amp;gt; 小猫、小狗没问题，小鱼、小虾更没关系。但是大只和奇葩的还是算了哈~&lt;/p&gt;

&lt;p&gt;得有淘汰制(必须) =&amp;gt; 这个“必须”还是让我略微矛盾，因为对自己“狠”和对他人“狠”还是不一样。就这么写着吧，用来警醒自己。&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;硬环境(配套设施)&lt;/h4&gt;

&lt;p&gt;办公环境不要太过，中等就好，拒绝小资、傲娇 =&amp;gt; 过好的环境会让人缺乏斗志&lt;/p&gt;

&lt;p&gt;电脑得配好的&lt;/p&gt;

&lt;p&gt;适当提供免费零食 =&amp;gt; 比如下午发一波，晚上发一波。亲身经历：加班到凌晨，饿的抵不到才想起定外卖，伤不起呀&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;软环境(公司文化)&lt;/h4&gt;

&lt;p&gt;洗手间文化 =&amp;gt; 不想解释&lt;/p&gt;

&lt;p&gt;邮件 =&amp;gt; 对于新手和应届必须得有培训&lt;/p&gt;

&lt;p&gt;分享精神&lt;/p&gt;

&lt;p&gt;简单可依赖？以人为本？酌情…容我再想想&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;差不多先这样，想起一点写一点，所以偶想到啥后续再补，吼吼~&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;更新历史&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;section-8&quot;&gt;2016/07/28&lt;/h4&gt;
    &lt;ul&gt;
      &lt;li&gt;增加 友善对待宠物/员工电脑配好的/适当提供免费零食/邮件培训&lt;/li&gt;
      &lt;li&gt;对于女员工怀孕问题，必须提供保障和福利&lt;/li&gt;
      &lt;li&gt;淘汰制由“非必须”改成“必须”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/startup/&quot;&gt;如果我去创业&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on May 15, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Gulp使用小结(上)]]></title>
  <link rel="alternate" type="text/html" href="/gulp_1/" />
  <id>/gulp_1</id>
  <published>2016-04-30T00:00:00+08:00</published>
  <updated>2016-04-30T00:00:00+08:00</updated>
  <author>
    <name>nieweidong</name>
    <uri></uri>
    <email>darrencode@qq.com</email>
  </author>
  <content type="html">
    &lt;p&gt;这篇文章不会介绍 &lt;code&gt;Gulp&lt;/code&gt; 的起源、发展；不会去一个个讲解 &lt;code&gt;Gulp API&lt;/code&gt;；也不想出现大段大段的 &lt;code&gt;gulpfile.js&lt;/code&gt; 代码；更木有帮你分析 &lt;code&gt;Gulp&lt;/code&gt; 实现原理，只有一些我自己对 &lt;code&gt;Gulp&lt;/code&gt; 的使用理解和总结。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如何通过 &lt;code&gt;Gulp&lt;/code&gt; 让偶们的前端项目高大上的跑起来？&lt;code&gt;Gulp&lt;/code&gt; 能做什么，还能做什么？&lt;code&gt;Gulp&lt;/code&gt;套路能不能来几套？… 希望通过这篇文章你会找到答案&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;写作风格的原因，劳资写的文章都较详(啰)细(嗦)，请轻拍:)&lt;/p&gt;

&lt;p&gt;当然，同样期待能得到伙伴们的讨论和支持。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;目录&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;简单介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#must&quot;&gt;必备插件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#common&quot;&gt;常用插件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#minority&quot;&gt;进阶插件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gulpfile&quot;&gt;聊聊 gulpfile.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#write&quot;&gt;套路&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#over&quot;&gt;结语&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rec&quot;&gt;推荐阅读&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;intro&quot;&gt;简单介绍&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;这篇文章的目的是：介绍些我知晓的 &lt;code&gt;Gulp plugins&lt;/code&gt;，然后用少量的代码讲解，最终希望大家能用 &lt;code&gt;Gulp&lt;/code&gt; 让前端项目高大上的跑起来&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;默认读者知道点 &lt;code&gt;npm/cnpm&lt;/code&gt;；明白 &lt;code&gt;package.json&lt;/code&gt; 是作甚的；了解 &lt;code&gt;gulpfile.js&lt;/code&gt; 是作甚的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这篇文章起草于2014年下半年，那时 &lt;code&gt;Gulp&lt;/code&gt; 还算个较新潮的玩意。所以在项目实践的过程中，自己记录鸟不少使用收获，心里闷骚的想，等哪天有空再润色一把即可分享出去，但特么拖拖拉拉的就到2016年…&lt;/p&gt;

&lt;p&gt;转眼 &lt;code&gt;Gulp&lt;/code&gt; 都已快被归类为过时的技术鸟(&lt;a href=&quot;http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part1&quot;&gt;《我为何放弃Gulp与Grunt，转投npm scripts》&lt;/a&gt;，有关这篇文章下一篇偶再单独细聊)，于是趁着周末之余，火速整理下自己的 &lt;code&gt;gulp&lt;/code&gt; 套路发布出来，也希望对其他小伙伴有点用。&lt;/p&gt;

&lt;p&gt;本文最下方有一些 文章/文档 的阅读推荐:)&lt;/p&gt;

&lt;h3 id=&quot;must&quot;&gt;必备插件&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;【必备】不是指每次项目都得用，而是指最基础的。你可以不用，但是得知道的那些 Gulp 插件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;以下插件的方向都各自有不少相似的插件，所以不必过多纠结，用的开心就行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-htmlmin&quot;&gt;gulp-htmlmin&lt;/a&gt; 看到名字就能知道，这个插件是用来压缩 &lt;code&gt;HTML&lt;/code&gt;。PS：注释啥的都可以去掉哦，看文档get更多技能哈&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-imagemin&quot;&gt;gulp-imagemin&lt;/a&gt; 除了能压缩常见的图片格式，还能压缩 &lt;code&gt;SVG&lt;/code&gt;，叼叼的~&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-minify-css&quot;&gt;gulp-clean-css&lt;/a&gt; 压缩 CSS。我原本推荐的是 &lt;a href=&quot;https://www.npmjs.com/package/gulp-minify-css&quot;&gt;gulp-minify-css&lt;/a&gt;，结果其首页中已建议改用&lt;code&gt;gulp-clean-css&lt;/code&gt;…&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-uglify&quot;&gt;gulp-uglify&lt;/a&gt; 专业压缩 Javascript&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-concat&quot;&gt;gulp-concat&lt;/a&gt; 上面几个都是压缩，这插件是管合并的…恭喜，“减少网络请求”的成就达成:)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-autoprefixer&quot;&gt;gulp-autoprefixer&lt;/a&gt; 给 CSS 增加前缀。解决某些CSS属性不是标准属性，有各种浏览器前缀的情况，灰常有用&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-rename&quot;&gt;gulp-rename&lt;/a&gt; 修改文件名称。比如有时我们需要把&lt;code&gt;app.js&lt;/code&gt;改成&lt;code&gt;app.min.js&lt;/code&gt;，瞬间高级了&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-util&quot;&gt;gulp-util&lt;/a&gt; 最基础的工具，但俺只用来打日志…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;common&quot;&gt;常用插件&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;相对于必备插件，常用插件都是些【有用】但使用场景和频率没那么高的好插件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/run-sequence&quot;&gt;run-sequence&lt;/a&gt; &lt;code&gt;Gulp&lt;/code&gt; 的 &lt;code&gt;task&lt;/code&gt; 都是并行(异步)执行，如果遇见需要串行的场景，那么这个插件就是必备了。偶的使用场景是：处理(压缩、合并等等) &lt;code&gt;CSS/JS&lt;/code&gt;、再&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev&quot;&gt;gulp-rev&lt;/a&gt;、再上传 &lt;code&gt;CDN&lt;/code&gt;；然后使用 &lt;code&gt;CDN&lt;/code&gt;的地址替换 &lt;code&gt;HTML&lt;/code&gt; 中的 &lt;code&gt;CSS/JS&lt;/code&gt; 地址，再压缩 &lt;code&gt;HTML&lt;/code&gt;。那么替换 &lt;code&gt;HTML&lt;/code&gt; 这步须在之前的工作处理完后再执行。 ** 最后要说，&lt;code&gt;Gulp4.0&lt;/code&gt; 发布后，不需要 &lt;a href=&quot;https://www.npmjs.com/package/run-sequence&quot;&gt;RS&lt;/a&gt; 也可以搞定串行任务了 **&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/del&quot;&gt;del&lt;/a&gt; / &lt;a href=&quot;https://www.npmjs.com/package/gulp-clean&quot;&gt;gulp-clean&lt;/a&gt; 删除。俺的使用场景是：&lt;code&gt;JS/CSS&lt;/code&gt; 文件都会在压缩后使用&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev&quot;&gt;gulp-rev&lt;/a&gt;，即文件名被&lt;code&gt;hash&lt;/code&gt;，然后再上传到 &lt;code&gt;CDN&lt;/code&gt;，最后俺再使用 &lt;strong&gt;删除插件&lt;/strong&gt; 把本地压缩后的文件删除掉，不用多余保存。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev&quot;&gt;gulp-rev&lt;/a&gt; 把静态文件名改成&lt;code&gt;hash&lt;/code&gt;的形式。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev-replace&quot;&gt;gulp-rev-replace&lt;/a&gt; 配合 &lt;a href=&quot;https://www.npmjs.com/package/gulp-rev&quot;&gt;gulp-rev&lt;/a&gt; 使用，拿到生成的 &lt;code&gt;manifest。json&lt;/code&gt; 后替换对应的文件名称。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev-collector&quot;&gt;gulp-rev-collector&lt;/a&gt; 到线上环境前，俺会用来配合&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev&quot;&gt;gulp-rev&lt;/a&gt;使用，替换 &lt;code&gt;HTML&lt;/code&gt; 中的路径&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev-append&quot;&gt;gulp-rev-append&lt;/a&gt; 给页面引用的静态文件增加&lt;code&gt;hash&lt;/code&gt;后缀，避免被浏览器缓存…当然，如果是使用 &lt;code&gt;CDN&lt;/code&gt;，这个套路就不行了&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-connect&quot;&gt;gulp-connect&lt;/a&gt; / &lt;a href=&quot;https://www.npmjs.com/package/gulp-livereload&quot;&gt;gulp-livereload&lt;/a&gt; &lt;code&gt;LiveReload&lt;/code&gt; 的俩款插件都值得拥有，不过都各稍有学习成本，看看文档就明白鸟&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-sourcemaps&quot;&gt;gulp-sourcemaps&lt;/a&gt; 处理 &lt;code&gt;JavaScript&lt;/code&gt; 时生成 &lt;code&gt;SourceMap&lt;/code&gt;；如果你不了解 &lt;code&gt;SourceMap&lt;/code&gt;，可以看看这篇阮一峰大神的&lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html&quot;&gt;《Source Map 详解》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-load-plugins&quot;&gt;gulp-load-plugins&lt;/a&gt; 帮忙偷懒用的，可以帮我们加载插件，不用&lt;code&gt;require&lt;/code&gt;或者&lt;code&gt;import&lt;/code&gt;…当然，俺个人感觉用了这个插件后，阅读&lt;code&gt;gulpfile.js&lt;/code&gt;的可读性差了，鱼和熊掌不可兼得:(&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-jshint&quot;&gt;gulp-jshint&lt;/a&gt; &lt;code&gt;JavaScript&lt;/code&gt; 代码校验&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-sass&quot;&gt;gulp-sass&lt;/a&gt; / &lt;a href=&quot;https://www.npmjs.com/package/gulp-less&quot;&gt;gulp-less&lt;/a&gt; 写 &lt;code&gt;CSS&lt;/code&gt; 的同学都懂哈&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;minority&quot;&gt;进阶插件&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;必备插件和常用插件都有一个特点，就是下载数都不小。虽然有少部分插件下载数相对不多，但同样值得拥有或了解&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://babeljs.io/&quot;&gt;babel&lt;/a&gt; &lt;code&gt;JS&lt;/code&gt; 语法新特性用起来。这个插件可以让我们用新的 &lt;strong&gt;标准/特性/提案&lt;/strong&gt; 写 &lt;code&gt;JavaScript&lt;/code&gt; 代码，然后再向下 &lt;strong&gt;转换编译&lt;/strong&gt;，最终生成随处可用的 &lt;code&gt;JavaScript&lt;/code&gt; 代码。更通俗的说话就是：可以用新的规范写代码，经过 &lt;code&gt;babel&lt;/code&gt; 编译后生成没有兼容问题的代码。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-flatten&quot;&gt;gulp-flatten&lt;/a&gt; 移动指定文件，不想压缩或者合并的时候，直接用这个插件把对应文件移动到指定文件夹。俺偶尔在内部项目会偷懒用上，图方便:)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-coffee&quot;&gt;gulp-coffee&lt;/a&gt; &lt;code&gt;CoffeeScript&lt;/code&gt; 值得去了解&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-markdown-pdf&quot;&gt;gulp-markdown-pdf&lt;/a&gt; 把 &lt;code&gt;Markdown&lt;/code&gt; 编译为 &lt;code&gt;PDF&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-markdown&quot;&gt;gulp-markdown&lt;/a&gt; 写手的福音，可以把 &lt;code&gt;Markdown&lt;/code&gt; 转成 &lt;code&gt;HTML&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-html2md&quot;&gt;gulp-html2md&lt;/a&gt; 把 &lt;code&gt;HTML&lt;/code&gt; 编译为 &lt;code&gt;Markdown&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-tinypng&quot;&gt;gulp-tinypng&lt;/a&gt; 超屌的图片压缩工具，使用 &lt;code&gt;Tinypng&lt;/code&gt; 引擎。PS：因为 &lt;code&gt;Tinypng&lt;/code&gt; 免费帐号有月限制，所以使用使需注意。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/sprity&quot;&gt;sprity&lt;/a&gt; 生成雪碧图。稍有点学习成本，仔细阅读文档即可。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-if&quot;&gt;gulp-if&lt;/a&gt; 可以在 &lt;code&gt;pipe&lt;/code&gt; 里面写点逻辑了，屌不屌。举例：比如处理 &lt;code&gt;./pub/*.js&lt;/code&gt;，如果文件名称是 &lt;code&gt;xxx.js&lt;/code&gt;，那么不处理；更可以用来区分当前是开发环境还是生产环境。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-file-include&quot;&gt;gulp-file-include&lt;/a&gt; 俺搞内部项目的时候会用到，让 &lt;code&gt;HTML&lt;/code&gt; 组件化的第一小步&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-git&quot;&gt;gulp-git&lt;/a&gt; 直接在 &lt;code&gt;Build&lt;/code&gt; 时把代码都提交到 &lt;code&gt;git&lt;/code&gt;上了…特么劳资懒起来连我自己都害怕&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-qiniu&quot;&gt;gulp-qiniu&lt;/a&gt; 用于把指定文件上传至七牛的指定路径下(PS:首先，你得有自己的七牛账号和空间)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-notify&quot;&gt;gulp-notify&lt;/a&gt; 在控制台中加入文字描述，&lt;code&gt;build&lt;/code&gt; 的时候更高级有木有。当然，当需要的时候把错误信息也展示出来会很有帮助。更高级的功能就需要你查看其文档了~&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-plumber&quot;&gt;gulp-plumber&lt;/a&gt; &lt;code&gt;Gulp&lt;/code&gt; 的错误处理有点坑，假如发生错误进程就挂了。相对的解决办法不少，但是这个是我个人比较推荐的，比特么在容易出错的地方写错误监听靠谱。所以这个插件可以阻止 &lt;code&gt;Gulp&lt;/code&gt; 插件发生错误导致进程退出并输出错误日志。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gulpfile&quot;&gt;聊聊 gulpfile.js&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Gulp API&lt;/code&gt; 真没啥好说的，所以也从没打算花时间介绍，那这一节劳资要说说啥呢…干货！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;已经枯燥的balabala一通插件，所以偶用自己的方式聊聊这个 &lt;code&gt;gulpfile.js&lt;/code&gt;。PS：默认读者了解，所以不堆代码了哈&lt;/p&gt;

&lt;p&gt;一个较简单的前端项目，&lt;code&gt;gulpfile.js&lt;/code&gt; 可以轻松上百行，稍复杂点儿的此文件会更大，肯定会不方便阅读和维护。&lt;/p&gt;

&lt;p&gt;下面这套目录结构，是适合较复杂前端项目的 &lt;code&gt;gulpfile.js&lt;/code&gt; 套路，仅供参考：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-delphi&quot; data-lang=&quot;delphi&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gulpfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 环境相关&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;└──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qiniu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// CDN&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xxxx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;└──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;第一行中的 &lt;code&gt;gulpfile.js&lt;/code&gt; 也可换成 &lt;code&gt;gulpfile.babel.js&lt;/code&gt;。如果想看 &lt;code&gt;gulpfile.babel.js&lt;/code&gt; 的示例可以去 &lt;a href=&quot;https://github.com/google/web-starter-kit/blob/master/gulpfile.babel.js&quot;&gt;https://github.com/google/web-starter-kit/blob/master/gulpfile.babel.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;gulp-conf&lt;/code&gt; 路径、公共参数等等，把有必要都变成配置文件，代码优雅多了。当然，如果没有必要就别麻烦了，视情况来&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;gulp-tasks&lt;/code&gt; 内的各个文件都是些分类型的子任务，这样一拆分 &lt;code&gt;gulpfile.js&lt;/code&gt; 必定清爽很多，关键是之后维护各种 &lt;code&gt;task&lt;/code&gt; 也简单很多&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;不贴代码的原因是因为我只想提供个 &lt;strong&gt;文件夹套路&lt;/strong&gt;，其实怎么用着爽、怎么分类、甚至怎么取名这些都见仁见智，反正目的是让代码组织的够清晰、好维护，那么偶们的目标就达到鸟&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;write&quot;&gt;套路&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;这节会基于这些插件的相互配合和清晰的 &lt;code&gt;Gulp&lt;/code&gt; 目录结构，让偶们的前端项目快速且高大上的 &lt;code&gt;build&lt;/code&gt; 起来！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;偶这粗暴的把套路分成三类：一种是相对简单点的；一种是稍稍复杂点的；一种是“玩”的比较复杂的。区分的原则是这仨套路的目标会有稍许不同，而且项目需求也不同。搞清楚我们(项目)到底想要得到什么，那么剩下的就是去实现它了！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;附加组合&lt;/strong&gt; 这类在这篇就不说了，比如 &lt;code&gt;gulp+webpack&lt;/code&gt; 这种 &lt;code&gt;CP&lt;/code&gt;，针对 &lt;code&gt;React&lt;/code&gt; 项目可以面面俱到。。。这如果要分析起来，比特么 &lt;code&gt;Gulp&lt;/code&gt; 复杂多了去了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果你问我，有木有最简单的套路，答曰：有！&lt;/p&gt;

&lt;p&gt;如果你问我，最简单的方法是神马，答曰：&lt;strong&gt;不要用这些 &lt;code&gt;build&lt;/code&gt; 工具…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;哇哈哈哈哈哈哈~&lt;/p&gt;

&lt;h4&gt;简单套路&lt;/h4&gt;

&lt;p&gt;项目/人群 目标：要求较高的个人项目、公司内部项目、小商业项目&lt;/p&gt;

&lt;p&gt;主要需求：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;HTML&lt;/code&gt; 也得 &lt;code&gt;组件化(这词我有点反感，真听得烂大街了)&lt;/code&gt;。该 &lt;code&gt;common&lt;/code&gt; 的拎出来；该 &lt;code&gt;widget&lt;/code&gt; 的拎出来&lt;/li&gt;
  &lt;li&gt;图片压缩、合并&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;JS/CSS/HTML&lt;/code&gt; 压缩、合并&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;sass/less&lt;/code&gt; 必须得用起来，要不 &lt;code&gt;CSS&lt;/code&gt; 怎么显得高大上&lt;/li&gt;
  &lt;li&gt;额…差不多够了吧，毕竟我们只是入门的简体套路，再复杂点儿 &lt;code&gt;gulpfile.js&lt;/code&gt; 的体积就不小了:)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;一般套路&lt;/h4&gt;

&lt;p&gt;项目/人群 目标：喜爱尝试的个人项目、一般商业项目、要求较高的开源项目&lt;/p&gt;

&lt;p&gt;主要需求：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;简单套路里面的都包括&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;JavaScript&lt;/code&gt; 部分用 &lt;code&gt;ES6&lt;/code&gt; 来编写… &lt;strong&gt;PS：技术红利不用白不用嘛&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;JavaScript&lt;/code&gt; 代码校验用起来&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;CSS&lt;/code&gt; 方面根据设置项目所需的浏览器版本，从而自动处理浏览器前缀&lt;/li&gt;
  &lt;li&gt;所有静态文件全部上 &lt;code&gt;CDN&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;把 &lt;code&gt;task&lt;/code&gt; 进行拆分，使其更好维护&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;复杂套路&lt;/h4&gt;

&lt;p&gt;项目/人群 目标：商业项目、代码洁癖者…额，再加一项：程序员中的单身狗:)&lt;/p&gt;

&lt;p&gt;主要需求：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一般套路里面的都包括&lt;/li&gt;
  &lt;li&gt;增加对 &lt;code&gt;Gulp&lt;/code&gt; 进程出错的优雅处理&lt;/li&gt;
  &lt;li&gt;更多 &lt;code&gt;task&lt;/code&gt; 信息的相关展示&lt;/li&gt;
  &lt;li&gt;在 &lt;code&gt;task&lt;/code&gt; 中有逻辑处理，比如执行某 &lt;code&gt;task&lt;/code&gt; 会判断是否是开发环境，然后可以有相应的处理&lt;/li&gt;
  &lt;li&gt;自动清理掉那些不需要的 &lt;code&gt;tmp&lt;/code&gt; 文件(临时文件)，只留下真正有用的代码&lt;/li&gt;
  &lt;li&gt;LiveReload&lt;/li&gt;
  &lt;li&gt;代码自动同步 &lt;code&gt;git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;劳资实在编不下去了…&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;over&quot;&gt;结语&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;你的插件应该只做一件事，并且做好&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;写插件原本是我想好好写的地方，发现中文文档已经非常丰富了，那就不费那个劲了，直接贴官方地址：&lt;a href=&quot;http://www.gulpjs.com.cn/docs/writing-a-plugin/&quot;&gt;http://www.gulpjs.com.cn/docs/writing-a-plugin/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最后聊聊我眼中的 &lt;code&gt;Gulp&lt;/code&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Gulp&lt;/code&gt; 目前有相关插件2266个&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Gulp&lt;/code&gt; 是基于 &lt;code&gt;Node&lt;/code&gt; 的，95%的代码都是 &lt;code&gt;JavaScript&lt;/code&gt;，5%的代码是 &lt;code&gt;Shell&lt;/code&gt;，&lt;a href=&quot;https://www.npmjs.com/package/gulp&quot;&gt;npmjs.com&lt;/a&gt;显示上个月的下载超过210W，当前(2016/04/30)release 的版本是3.9.1&lt;/li&gt;
  &lt;li&gt;神马？安装各种插件还是用 &lt;code&gt;npm&lt;/code&gt;？赶紧 &lt;a href=&quot;https://www.npmjs.com/package/cnpm&quot;&gt;cnpm&lt;/a&gt; 用起来，安装速度噌噌的&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Gulp&lt;/code&gt; VS &lt;code&gt;Grunt&lt;/code&gt; 这话题已经被说烂，但我还是想说说。个人觉得玩&lt;code&gt;Grunt&lt;/code&gt;是种写配置的感觉；玩&lt;code&gt;Gulp&lt;/code&gt;就是写脚本(task)，且&lt;code&gt;Gulp&lt;/code&gt;更容易上手、更高效。 推荐读者看看这篇文章&lt;a href=&quot;http://www.benben.cc/blog/?p=407&quot;&gt;Gulp vs Grunt&lt;/a&gt;，写的着实深入浅出&lt;/li&gt;
  &lt;li&gt;编译 &lt;code&gt;CoffeeScript&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;编译 &lt;code&gt;less / sass&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;把 &lt;code&gt;HTML&lt;/code&gt; 编译为 &lt;code&gt;Markdown&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;把 &lt;code&gt;Markdown&lt;/code&gt; 编译为 &lt;code&gt;HTML/pdf&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;把 &lt;code&gt;Excel&lt;/code&gt; 编译为 &lt;code&gt;HTML/JSON&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;开发 &lt;code&gt;React&lt;/code&gt; 项目时和好基友 &lt;code&gt;webpack&lt;/code&gt; 配合，酸爽到爆，推荐同事的一篇文章，我司目前的&lt;code&gt;React&lt;/code&gt; 项目基本就是这个套路：&lt;a href=&quot;http://www.boke.io/ji-yu-gulphe-webpackde-qian-duan-gong-zuo-liu/&quot;&gt;《基于gulp和webpack的前端工程化》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近在InfoQ上有读到一个系列的文章，是讨论 &lt;code&gt;Gulp&lt;/code&gt; 和 &lt;code&gt;npm script&lt;/code&gt; 优劣，地址 - &lt;a href=&quot;http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part1&quot;&gt;《我为何放弃Gulp与Grunt，转投npm scripts》&lt;/a&gt;。篇幅有限，下期的文章我再拿出来讨论，不过推荐大家阅读，还是值得我们思考的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下一篇会把这篇文章所介绍的套路，用代码体现出来，文章发布时git会同步更新，地址：&lt;a href=&quot;https://github.com/nieweidong/gulp-demos&quot;&gt;gulp-demos&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;rec&quot;&gt;推荐阅读&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/web-starter-kit/blob/master/gulpfile.babel.js&quot;&gt;gulp示例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://slides.com/contra/gulp&quot;&gt;为什么是gulp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jabez128/stream-handbook&quot;&gt;《stream-handbook中文版》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lisposter/gulp-docs-zh-cn&quot;&gt;《gulp 简体中文文档》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gulpjs.com.cn/&quot;&gt;Gulp中文网 http://www.gulpjs.com.cn/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gulpjs.com.cn/docs/getting-started/&quot;&gt;入门指南 http://www.gulpjs.com.cn/docs/getting-started/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.boke.io/ji-yu-gulphe-webpackde-qian-duan-gong-zuo-liu/&quot;&gt;《基于gulp和webpack的前端工程化》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/gulp_1/&quot;&gt;Gulp使用小结(上)&lt;/a&gt; was originally published by nieweidong at &lt;a href=&quot;&quot;&gt;聂微东，一枚Web技术领域的手艺人&lt;/a&gt; on April 30, 2016.&lt;/p&gt;
  </content>
</entry>

</feed>